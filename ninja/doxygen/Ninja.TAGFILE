<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>doxygen_mainpage</name>
    <path>/home/evanm/projects/ninja/build/</path>
    <filename>doxygen__mainpage</filename>
  </compound>
  <compound kind="file">
    <name>browse.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>browse_8cc</filename>
    <includes id="browse_8h" name="browse.h" local="yes" imported="no">browse.h</includes>
    <member kind="function">
      <type>void</type>
      <name>RunBrowsePython</name>
      <anchorfile>browse_8cc.html</anchorfile>
      <anchor>a19bfd0ee33f15bcfce46114a0bdba59a</anchor>
      <arglist>(State *state, const char *ninja_command, const char *initial_target)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>browse.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>browse_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>RunBrowsePython</name>
      <anchorfile>browse_8h.html</anchorfile>
      <anchor>a19bfd0ee33f15bcfce46114a0bdba59a</anchor>
      <arglist>(State *state, const char *ninja_command, const char *initial_target)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>build.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>build_8cc</filename>
    <includes id="build_8h" name="build.h" local="yes" imported="no">build.h</includes>
    <includes id="build__log_8h" name="build_log.h" local="yes" imported="no">build_log.h</includes>
    <includes id="debug__flags_8h" name="debug_flags.h" local="yes" imported="no">debug_flags.h</includes>
    <includes id="depfile__parser_8h" name="depfile_parser.h" local="yes" imported="no">depfile_parser.h</includes>
    <includes id="deps__log_8h" name="deps_log.h" local="yes" imported="no">deps_log.h</includes>
    <includes id="disk__interface_8h" name="disk_interface.h" local="yes" imported="no">disk_interface.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">graph.h</includes>
    <includes id="msvc__helper_8h" name="msvc_helper.h" local="yes" imported="no">msvc_helper.h</includes>
    <includes id="state_8h" name="state.h" local="yes" imported="no">state.h</includes>
    <includes id="subprocess_8h" name="subprocess.h" local="yes" imported="no">subprocess.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <class kind="struct">RealCommandRunner</class>
  </compound>
  <compound kind="file">
    <name>build.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>build_8h</filename>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">graph.h</includes>
    <includes id="exit__status_8h" name="exit_status.h" local="yes" imported="no">exit_status.h</includes>
    <includes id="line__printer_8h" name="line_printer.h" local="yes" imported="no">line_printer.h</includes>
    <includes id="metrics_8h" name="metrics.h" local="yes" imported="no">metrics.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <class kind="struct">BuildConfig</class>
    <class kind="struct">Builder</class>
    <class kind="struct">BuildStatus</class>
    <class kind="struct">CommandRunner</class>
    <class kind="struct">Plan</class>
    <class kind="struct">BuildStatus::RateInfo</class>
    <class kind="struct">CommandRunner::Result</class>
    <class kind="struct">BuildStatus::SlidingRateInfo</class>
  </compound>
  <compound kind="file">
    <name>build_log.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>build__log_8cc</filename>
    <includes id="build__log_8h" name="build_log.h" local="yes" imported="no">build_log.h</includes>
    <includes id="build_8h" name="build.h" local="yes" imported="no">build.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">graph.h</includes>
    <includes id="metrics_8h" name="metrics.h" local="yes" imported="no">metrics.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <class kind="struct">LineReader</class>
    <member kind="define">
      <type>#define</type>
      <name>__STDC_FORMAT_MACROS</name>
      <anchorfile>build__log_8cc.html</anchorfile>
      <anchor>aacbb9e1f38be71e22df1584a37c56693</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BIG_CONSTANT</name>
      <anchorfile>build__log_8cc.html</anchorfile>
      <anchor>a8e0f90a6ea3d3db65033b8ace70cb65a</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>build_log.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>build__log_8h</filename>
    <includes id="hash__map_8h" name="hash_map.h" local="yes" imported="no">hash_map.h</includes>
    <includes id="timestamp_8h" name="timestamp.h" local="yes" imported="no">timestamp.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <class kind="struct">BuildLog</class>
    <class kind="struct">BuildLogUser</class>
    <class kind="struct">BuildLog::LogEntry</class>
  </compound>
  <compound kind="file">
    <name>build_log_perftest.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>build__log__perftest_8cc</filename>
    <includes id="build__log_8h" name="build_log.h" local="yes" imported="no">build_log.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">graph.h</includes>
    <includes id="manifest__parser_8h" name="manifest_parser.h" local="yes" imported="no">manifest_parser.h</includes>
    <includes id="state_8h" name="state.h" local="yes" imported="no">state.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <includes id="metrics_8h" name="metrics.h" local="yes" imported="no">metrics.h</includes>
    <class kind="struct">NoDeadPaths</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>build__log__perftest_8cc.html</anchorfile>
      <anchor>ae66f6b31b5ad750f1fe042a706a4e3d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteTestData</name>
      <anchorfile>build__log__perftest_8cc.html</anchorfile>
      <anchor>ad57cd9f8683273b577960bb8ed19717a</anchor>
      <arglist>(string *err)</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>kTestFilename</name>
      <anchorfile>build__log__perftest_8cc.html</anchorfile>
      <anchor>a59e14193a985d28b8fe2bcba0ebb7481</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>build_log_test.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>build__log__test_8cc</filename>
    <includes id="build__log_8h" name="build_log.h" local="yes" imported="no">build_log.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <includes id="test_8h" name="test.h" local="yes" imported="no">test.h</includes>
  </compound>
  <compound kind="file">
    <name>build_test.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>build__test_8cc</filename>
    <includes id="build_8h" name="build.h" local="yes" imported="no">build.h</includes>
    <includes id="build__log_8h" name="build_log.h" local="yes" imported="no">build_log.h</includes>
    <includes id="deps__log_8h" name="deps_log.h" local="yes" imported="no">deps_log.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">graph.h</includes>
    <includes id="test_8h" name="test.h" local="yes" imported="no">test.h</includes>
    <class kind="struct">BuildDryRun</class>
    <class kind="struct">BuildTest</class>
    <class kind="struct">BuildWithDepsLogTest</class>
    <class kind="struct">BuildWithLogTest</class>
    <class kind="struct">FakeCommandRunner</class>
    <class kind="struct">PlanTest</class>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>aa2d4879a1416ae4b4db00986d0b091eb</anchor>
      <arglist>(PlanTest, Basic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a465c1e426b27db03a5e58068f40918e6</anchor>
      <arglist>(PlanTest, DoubleOutputDirect)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>af73564f25b6a3cdb2bff3fd63488ccd9</anchor>
      <arglist>(PlanTest, DoubleOutputIndirect)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>ab6bbc3f9d794574d8544e994dc51763d</anchor>
      <arglist>(PlanTest, DoubleDependent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a32cb5f01c3792f42303ac0a484af16fe</anchor>
      <arglist>(PlanTest, DependencyCycle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>ae56ad52732566d3f3671bc2ca3800772</anchor>
      <arglist>(PlanTest, PoolWithDepthOne)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a81c8add2852054c273bd49a166a99f0c</anchor>
      <arglist>(PlanTest, ConsolePool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>aba0b245377c14ea277fcba6939f80802</anchor>
      <arglist>(PlanTest, PoolsWithDepthTwo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a20037dc13e5f0d17aa4d6b002a26071b</anchor>
      <arglist>(PlanTest, PoolWithRedundantEdges)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>aeb100edada9b6d88d32289cdb07f6fe3</anchor>
      <arglist>(BuildTest, NoWork)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>acd1f5902b337d6867f59c773af5525f8</anchor>
      <arglist>(BuildTest, OneStep)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a717e3b6b3779ff8155844c91c065c9fc</anchor>
      <arglist>(BuildTest, OneStep2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>ace3ece4b39c0b4f31fc95f04ff8c4a6b</anchor>
      <arglist>(BuildTest, TwoStep)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a680193f2c77e198ea6a9ad054cbfe2e9</anchor>
      <arglist>(BuildTest, TwoOutputs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a33a7e9bf806039ed87fcb36309b91876</anchor>
      <arglist>(BuildTest, MultiOutIn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a05b8ce5b9038e3ac96054690e6289c80</anchor>
      <arglist>(BuildTest, Chain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a2bb777934cdb98dc1dac325dd3d17b87</anchor>
      <arglist>(BuildTest, MissingInput)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a4bc1ce124ac151045412a17ac316c46e</anchor>
      <arglist>(BuildTest, MissingTarget)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>aaadbae9982b7daa69c50bab528e334a6</anchor>
      <arglist>(BuildTest, MakeDirs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>abe7584bb63eae56272542d797b97b210</anchor>
      <arglist>(BuildTest, DepFileMissing)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>abc6af995c7a59b3be29e6dfe99b99d57</anchor>
      <arglist>(BuildTest, DepFileOK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a02c5903988358c30c5a3ec47d3abfde8</anchor>
      <arglist>(BuildTest, DepFileParseError)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a48c0b8b1c43e57402a1e4bf1f1dd1b79</anchor>
      <arglist>(BuildTest, OrderOnlyDeps)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a6d4b2762994d6d985dd5e50b840be6bb</anchor>
      <arglist>(BuildTest, RebuildOrderOnlyDeps)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>ac6e6bab4702d4d11bc3dd57025cee96e</anchor>
      <arglist>(BuildTest, Phony)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a1e954fac98e6e28efe553b8613a3ea3c</anchor>
      <arglist>(BuildTest, PhonyNoWork)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a171d30ba1a29a2a87b69b4137cd7453b</anchor>
      <arglist>(BuildTest, Fail)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a1f958058d537a879393548df4fbfde8a</anchor>
      <arglist>(BuildTest, SwallowFailures)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a43d85064a23e9f9ac4de0507dfb3a774</anchor>
      <arglist>(BuildTest, SwallowFailuresLimit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a33d47e644608509c6516c8d2eb7c7579</anchor>
      <arglist>(BuildWithLogTest, NotInLogButOnDisk)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>ae9cac5524a8e8a92c615ab31dd3120b4</anchor>
      <arglist>(BuildWithLogTest, RestatTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a6b3bd54187f4b4b62135e75ae739baa1</anchor>
      <arglist>(BuildWithLogTest, RestatMissingFile)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a9e3ec8786022b67a4f84a2c72a43e051</anchor>
      <arglist>(BuildWithLogTest, RestatSingleDependentOutputDirty)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a8ba78c5fb4d2fa76b36d0b6c433fe0ea</anchor>
      <arglist>(BuildWithLogTest, RestatMissingInput)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a43b7cd64e3df6a6aca6f958fedc564c5</anchor>
      <arglist>(BuildDryRun, AllCommandsShown)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>ad4476b456c6ce70259f78bacaa5c46a8</anchor>
      <arglist>(BuildTest, RspFileSuccess)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a6228bac44015158ac5798b6eefc14c67</anchor>
      <arglist>(BuildTest, RspFileFailure)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>ade526dc031ef20821d8f6d8ce276fed2</anchor>
      <arglist>(BuildWithLogTest, RspFileCmdLineChange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a49b10dd4d8ce22b41e9d6c70b184f722</anchor>
      <arglist>(BuildTest, InterruptCleanup)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a4aa2edc5bc6ed71bf8f11c185efe8712</anchor>
      <arglist>(BuildTest, PhonyWithNoInputs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>ac8f99213e889ebafc044f11a31b27071</anchor>
      <arglist>(BuildTest, DepsGccWithEmptyDepfileErrorsOut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a96d51e2be95ad1837511b166832ad072</anchor>
      <arglist>(BuildTest, StatusFormatReplacePlaceholder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>aba91e1dfbd537ad42b54cd9cd8e9a9fb</anchor>
      <arglist>(BuildTest, FailedDepsParse)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a7f60040db674ac1290cdcbe8eae436ae</anchor>
      <arglist>(BuildWithDepsLogTest, Straightforward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a82d9303682edd319f1d5a75d02195770</anchor>
      <arglist>(BuildWithDepsLogTest, ObsoleteDeps)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a476466e224a42c7ba9a12fe23b13336a</anchor>
      <arglist>(BuildWithDepsLogTest, DepsIgnoredInDryRun)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>ad684e97fa0f991d8776e44e4cfd9d839</anchor>
      <arglist>(BuildTest, RestatDepfileDependency)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a05c6655022e2ac8dead877d944b9a18a</anchor>
      <arglist>(BuildWithDepsLogTest, RestatDepfileDependencyDepsLog)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a1b2529f00a46489a4fd16508b3e74650</anchor>
      <arglist>(BuildWithDepsLogTest, DepFileOKDepsLog)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>af59fb3f5ab94379f53c8e1f64899ccd0</anchor>
      <arglist>(BuildTest, RestatMissingDepfile)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a8d040593dff5c2ce4abda77ec51cd58e</anchor>
      <arglist>(BuildWithDepsLogTest, RestatMissingDepfileDepslog)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>build__test_8cc.html</anchorfile>
      <anchor>a39d84911421f1bd9e891aae73acdc728</anchor>
      <arglist>(BuildTest, Console)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>canon_perftest.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>canon__perftest_8cc</filename>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <includes id="metrics_8h" name="metrics.h" local="yes" imported="no">metrics.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>canon__perftest_8cc.html</anchorfile>
      <anchor>ae66f6b31b5ad750f1fe042a706a4e3d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>kPath</name>
      <anchorfile>canon__perftest_8cc.html</anchorfile>
      <anchor>a8938147b14fbd0ea2d2a65f28d53e2b8</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>clean.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>clean_8cc</filename>
    <includes id="clean_8h" name="clean.h" local="yes" imported="no">clean.h</includes>
    <includes id="disk__interface_8h" name="disk_interface.h" local="yes" imported="no">disk_interface.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">graph.h</includes>
    <includes id="state_8h" name="state.h" local="yes" imported="no">state.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
  </compound>
  <compound kind="file">
    <name>clean.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>clean_8h</filename>
    <includes id="build_8h" name="build.h" local="yes" imported="no">build.h</includes>
    <class kind="struct">Cleaner</class>
  </compound>
  <compound kind="file">
    <name>clean_test.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>clean__test_8cc</filename>
    <includes id="clean_8h" name="clean.h" local="yes" imported="no">clean.h</includes>
    <includes id="build_8h" name="build.h" local="yes" imported="no">build.h</includes>
    <includes id="test_8h" name="test.h" local="yes" imported="no">test.h</includes>
    <class kind="struct">CleanTest</class>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>clean__test_8cc.html</anchorfile>
      <anchor>ae2a8749b47d6d2637a868585050aca1e</anchor>
      <arglist>(CleanTest, CleanAll)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>clean__test_8cc.html</anchorfile>
      <anchor>a1b871b71139af12e10efb57a9af6c214</anchor>
      <arglist>(CleanTest, CleanAllDryRun)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>clean__test_8cc.html</anchorfile>
      <anchor>a73a05ce6d7999240e651fbe7b53ae284</anchor>
      <arglist>(CleanTest, CleanTarget)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>clean__test_8cc.html</anchorfile>
      <anchor>af98557cea739a11577ad4c9a832a305c</anchor>
      <arglist>(CleanTest, CleanTargetDryRun)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>clean__test_8cc.html</anchorfile>
      <anchor>a1a93c964bad9eadcb4c0efdaf2fc73a9</anchor>
      <arglist>(CleanTest, CleanRule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>clean__test_8cc.html</anchorfile>
      <anchor>a67288e870f177af7b24d8665540187a3</anchor>
      <arglist>(CleanTest, CleanRuleDryRun)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>clean__test_8cc.html</anchorfile>
      <anchor>ad7ffa4f0958a4f4f26c7083d30f44fac</anchor>
      <arglist>(CleanTest, CleanRuleGenerator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>clean__test_8cc.html</anchorfile>
      <anchor>a1658ea873d25471b6115ad6df3532f9f</anchor>
      <arglist>(CleanTest, CleanDepFile)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>clean__test_8cc.html</anchorfile>
      <anchor>ade08634511cf62301db2712b9109360b</anchor>
      <arglist>(CleanTest, CleanDepFileOnCleanTarget)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>clean__test_8cc.html</anchorfile>
      <anchor>aa5b478a61c63a266db49c9e35b7e2827</anchor>
      <arglist>(CleanTest, CleanDepFileOnCleanRule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>clean__test_8cc.html</anchorfile>
      <anchor>a0d4fb0326a94de6b9433429b57b570ab</anchor>
      <arglist>(CleanTest, CleanRspFile)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>clean__test_8cc.html</anchorfile>
      <anchor>aa25fa70584ce9b82a06f64dbb4fe87a6</anchor>
      <arglist>(CleanTest, CleanRsp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>clean__test_8cc.html</anchorfile>
      <anchor>af0dd311ab2c2d0a2df64dbbbbb5cbe68</anchor>
      <arglist>(CleanTest, CleanFailure)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>clean__test_8cc.html</anchorfile>
      <anchor>a55ce4d655e0160d4640317ad106fee9a</anchor>
      <arglist>(CleanTest, CleanPhony)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>clean__test_8cc.html</anchorfile>
      <anchor>ae051ae9d586ce4c2da38b157d9155667</anchor>
      <arglist>(CleanTest, CleanDepFileAndRspFileWithSpaces)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>debug_flags.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>debug__flags_8cc</filename>
    <member kind="variable">
      <type>bool</type>
      <name>g_experimental_statcache</name>
      <anchorfile>debug__flags_8cc.html</anchorfile>
      <anchor>a658844d6e894dbaf835d98051a45e62c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>g_explaining</name>
      <anchorfile>debug__flags_8cc.html</anchorfile>
      <anchor>aba5810fa2f3f3a9acec8c29dd5cf4dcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>g_keep_rsp</name>
      <anchorfile>debug__flags_8cc.html</anchorfile>
      <anchor>a5c5dbe2626f85f84cfc89f86f5c9e159</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>debug_flags.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>debug__flags_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>EXPLAIN</name>
      <anchorfile>debug__flags_8h.html</anchorfile>
      <anchor>a334e8f1dd8a740e85baff782ec1012c6</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>g_experimental_statcache</name>
      <anchorfile>debug__flags_8h.html</anchorfile>
      <anchor>a658844d6e894dbaf835d98051a45e62c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>g_explaining</name>
      <anchorfile>debug__flags_8h.html</anchorfile>
      <anchor>aba5810fa2f3f3a9acec8c29dd5cf4dcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>g_keep_rsp</name>
      <anchorfile>debug__flags_8h.html</anchorfile>
      <anchor>a5c5dbe2626f85f84cfc89f86f5c9e159</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>depfile_parser.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>depfile__parser_8cc</filename>
    <includes id="depfile__parser_8h" name="depfile_parser.h" local="yes" imported="no">depfile_parser.h</includes>
  </compound>
  <compound kind="file">
    <name>depfile_parser.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>depfile__parser_8h</filename>
    <includes id="string__piece_8h" name="string_piece.h" local="yes" imported="no">string_piece.h</includes>
    <class kind="struct">DepfileParser</class>
  </compound>
  <compound kind="file">
    <name>depfile_parser.in.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>depfile__parser_8in_8cc</filename>
    <includes id="depfile__parser_8h" name="depfile_parser.h" local="yes" imported="no">depfile_parser.h</includes>
  </compound>
  <compound kind="file">
    <name>depfile_parser_perftest.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>depfile__parser__perftest_8cc</filename>
    <includes id="depfile__parser_8h" name="depfile_parser.h" local="yes" imported="no">depfile_parser.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <includes id="metrics_8h" name="metrics.h" local="yes" imported="no">metrics.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>depfile__parser__perftest_8cc.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>depfile_parser_test.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>depfile__parser__test_8cc</filename>
    <includes id="depfile__parser_8h" name="depfile_parser.h" local="yes" imported="no">depfile_parser.h</includes>
    <class kind="struct">DepfileParserTest</class>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>depfile__parser__test_8cc.html</anchorfile>
      <anchor>af49aada6cd275a15673a92d318aef165</anchor>
      <arglist>(DepfileParserTest, Basic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>depfile__parser__test_8cc.html</anchorfile>
      <anchor>a29174fd5950e872abc50f537f39d5cc7</anchor>
      <arglist>(DepfileParserTest, EarlyNewlineAndWhitespace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>depfile__parser__test_8cc.html</anchorfile>
      <anchor>a0e86f2bd29472f7decaed6c34ed54ae9</anchor>
      <arglist>(DepfileParserTest, Continuation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>depfile__parser__test_8cc.html</anchorfile>
      <anchor>a45071150560c6f2e8c3fe7d7d48fe789</anchor>
      <arglist>(DepfileParserTest, CarriageReturnContinuation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>depfile__parser__test_8cc.html</anchorfile>
      <anchor>a09bba3a33e5a712ac0c5451ca1639235</anchor>
      <arglist>(DepfileParserTest, BackSlashes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>depfile__parser__test_8cc.html</anchorfile>
      <anchor>ae0eb55fa0040b00256ec7710258671eb</anchor>
      <arglist>(DepfileParserTest, Spaces)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>depfile__parser__test_8cc.html</anchorfile>
      <anchor>acc2e431a9864f366bfb325e026097ad0</anchor>
      <arglist>(DepfileParserTest, Escapes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>depfile__parser__test_8cc.html</anchorfile>
      <anchor>a47aa6d3fdf793299de1f035ba8995fc1</anchor>
      <arglist>(DepfileParserTest, SpecialChars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>depfile__parser__test_8cc.html</anchorfile>
      <anchor>a9e0a7c7081762ca8c1c90fc257209994</anchor>
      <arglist>(DepfileParserTest, UnifyMultipleOutputs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>depfile__parser__test_8cc.html</anchorfile>
      <anchor>a02e1a98d90f9c7725f57b297ee9f7831</anchor>
      <arglist>(DepfileParserTest, RejectMultipleDifferentOutputs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>deps_log.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>deps__log_8cc</filename>
    <includes id="deps__log_8h" name="deps_log.h" local="yes" imported="no">deps_log.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">graph.h</includes>
    <includes id="metrics_8h" name="metrics.h" local="yes" imported="no">metrics.h</includes>
    <includes id="state_8h" name="state.h" local="yes" imported="no">state.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <member kind="variable">
      <type>const int</type>
      <name>kCurrentVersion</name>
      <anchorfile>deps__log_8cc.html</anchorfile>
      <anchor>a921b019a3680c6975e949208c2b08af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>kFileSignature</name>
      <anchorfile>deps__log_8cc.html</anchorfile>
      <anchor>af3689d396263e39675199367e0138314</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>kMaxRecordSize</name>
      <anchorfile>deps__log_8cc.html</anchorfile>
      <anchor>a14c5a973c5acd0659069ca9516d247a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>deps_log.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>deps__log_8h</filename>
    <includes id="timestamp_8h" name="timestamp.h" local="yes" imported="no">timestamp.h</includes>
    <class kind="struct">DepsLog::Deps</class>
    <class kind="struct">DepsLog</class>
  </compound>
  <compound kind="file">
    <name>deps_log_test.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>deps__log__test_8cc</filename>
    <includes id="deps__log_8h" name="deps_log.h" local="yes" imported="no">deps_log.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">graph.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <includes id="test_8h" name="test.h" local="yes" imported="no">test.h</includes>
  </compound>
  <compound kind="file">
    <name>disk_interface.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>disk__interface_8cc</filename>
    <includes id="disk__interface_8h" name="disk_interface.h" local="yes" imported="no">disk_interface.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
  </compound>
  <compound kind="file">
    <name>disk_interface.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>disk__interface_8h</filename>
    <includes id="timestamp_8h" name="timestamp.h" local="yes" imported="no">timestamp.h</includes>
    <class kind="struct">DiskInterface</class>
    <class kind="struct">RealDiskInterface</class>
  </compound>
  <compound kind="file">
    <name>disk_interface_test.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>disk__interface__test_8cc</filename>
    <includes id="disk__interface_8h" name="disk_interface.h" local="yes" imported="no">disk_interface.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">graph.h</includes>
    <includes id="test_8h" name="test.h" local="yes" imported="no">test.h</includes>
  </compound>
  <compound kind="file">
    <name>edit_distance.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>edit__distance_8cc</filename>
    <includes id="edit__distance_8h" name="edit_distance.h" local="yes" imported="no">edit_distance.h</includes>
    <member kind="function">
      <type>int</type>
      <name>EditDistance</name>
      <anchorfile>edit__distance_8cc.html</anchorfile>
      <anchor>a80813485ab7d8f872aa96ca1e7b20bb1</anchor>
      <arglist>(const StringPiece &amp;s1, const StringPiece &amp;s2, bool allow_replacements, int max_edit_distance)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>edit_distance.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>edit__distance_8h</filename>
    <includes id="string__piece_8h" name="string_piece.h" local="yes" imported="no">string_piece.h</includes>
    <member kind="function">
      <type>int</type>
      <name>EditDistance</name>
      <anchorfile>edit__distance_8h.html</anchorfile>
      <anchor>ac5ca183ead410be034a88379d3274c10</anchor>
      <arglist>(const StringPiece &amp;s1, const StringPiece &amp;s2, bool allow_replacements=true, int max_edit_distance=0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>edit_distance_test.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>edit__distance__test_8cc</filename>
    <includes id="edit__distance_8h" name="edit_distance.h" local="yes" imported="no">edit_distance.h</includes>
    <includes id="test_8h" name="test.h" local="yes" imported="no">test.h</includes>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>edit__distance__test_8cc.html</anchorfile>
      <anchor>acc15124a049279589669c052c0f26149</anchor>
      <arglist>(EditDistanceTest, TestEmpty)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>edit__distance__test_8cc.html</anchorfile>
      <anchor>aa7b24ccc81fae8b078921d83ea938c83</anchor>
      <arglist>(EditDistanceTest, TestMaxDistance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>edit__distance__test_8cc.html</anchorfile>
      <anchor>a15437f90ffbcbfa3977b3997e3aa0953</anchor>
      <arglist>(EditDistanceTest, TestAllowReplacements)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>edit__distance__test_8cc.html</anchorfile>
      <anchor>ac9e2ecdf831fe018fb1b5861ccce5928</anchor>
      <arglist>(EditDistanceTest, TestBasics)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>eval_env.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>eval__env_8cc</filename>
    <includes id="eval__env_8h" name="eval_env.h" local="yes" imported="no">eval_env.h</includes>
  </compound>
  <compound kind="file">
    <name>eval_env.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>eval__env_8h</filename>
    <includes id="string__piece_8h" name="string_piece.h" local="yes" imported="no">string_piece.h</includes>
    <class kind="struct">BindingEnv</class>
    <class kind="struct">Env</class>
    <class kind="struct">EvalString</class>
  </compound>
  <compound kind="file">
    <name>exit_status.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>exit__status_8h</filename>
    <member kind="enumeration">
      <name>ExitStatus</name>
      <anchorfile>exit__status_8h.html</anchorfile>
      <anchor>ae189a3c432aa37137a55df8c91c579ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ExitSuccess</name>
      <anchorfile>exit__status_8h.html</anchorfile>
      <anchor>ae189a3c432aa37137a55df8c91c579edaef92f7c75fdb6d223cf8169571d00e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ExitFailure</name>
      <anchorfile>exit__status_8h.html</anchorfile>
      <anchor>ae189a3c432aa37137a55df8c91c579edad0386a0804bd7f62798e668db7b6a2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ExitInterrupted</name>
      <anchorfile>exit__status_8h.html</anchorfile>
      <anchor>ae189a3c432aa37137a55df8c91c579edabb8328afb7514f4069ac1ebeecda9b53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>getopt.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>getopt_8h</filename>
    <class kind="struct">GETOPT_LONG_OPTION_T</class>
    <member kind="define">
      <type>#define</type>
      <name>no_argument</name>
      <anchorfile>getopt_8h.html</anchorfile>
      <anchor>a3bc1d5f667b5b4ca4b4abb685dc874ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OPTIONAL_ARG</name>
      <anchorfile>getopt_8h.html</anchorfile>
      <anchor>a2b8273976fc9ee97330e8561b3fed13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQUIRED_ARG</name>
      <anchorfile>getopt_8h.html</anchorfile>
      <anchor>a668f16e7854ae9881b2534e5563d7c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct GETOPT_LONG_OPTION_T</type>
      <name>GETOPT_LONG_OPTION_T</name>
      <anchorfile>getopt_8h.html</anchorfile>
      <anchor>afbda14ece0f9058f11d050ba4dba934c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GETOPT_LONG_OPTION_T</type>
      <name>option</name>
      <anchorfile>getopt_8h.html</anchorfile>
      <anchor>ac633afeefa5faaa72842c605f00a0ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getopt</name>
      <anchorfile>getopt_8h.html</anchorfile>
      <anchor>ab5a9e4ffb6632f1f214ac39a1984139b</anchor>
      <arglist>(int argc, char **argv, char *optstring)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getopt_long</name>
      <anchorfile>getopt_8h.html</anchorfile>
      <anchor>aaf169384ab46c9c47f3cc4d8a37a64fc</anchor>
      <arglist>(int argc, char **argv, const char *shortopts, const GETOPT_LONG_OPTION_T *longopts, int *longind)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getopt_long_only</name>
      <anchorfile>getopt_8h.html</anchorfile>
      <anchor>aeed15d4d922eb90f83bff657e8f9d16a</anchor>
      <arglist>(int argc, char **argv, const char *shortopts, const GETOPT_LONG_OPTION_T *longopts, int *longind)</arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>optarg</name>
      <anchorfile>getopt_8h.html</anchorfile>
      <anchor>adb50a0eab9fed92fc3bfc7dfa4f2c410</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>opterr</name>
      <anchorfile>getopt_8h.html</anchorfile>
      <anchor>ae30f05ee1e2e5652f174a35c7875d25e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>optind</name>
      <anchorfile>getopt_8h.html</anchorfile>
      <anchor>ad5e1c16213bbee2d5e8cc363309f418c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>optopt</name>
      <anchorfile>getopt_8h.html</anchorfile>
      <anchor>a475b8db98445da73e5f62a1ef6324b95</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>graph.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>graph_8cc</filename>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">graph.h</includes>
    <includes id="build__log_8h" name="build_log.h" local="yes" imported="no">build_log.h</includes>
    <includes id="debug__flags_8h" name="debug_flags.h" local="yes" imported="no">debug_flags.h</includes>
    <includes id="depfile__parser_8h" name="depfile_parser.h" local="yes" imported="no">depfile_parser.h</includes>
    <includes id="deps__log_8h" name="deps_log.h" local="yes" imported="no">deps_log.h</includes>
    <includes id="disk__interface_8h" name="disk_interface.h" local="yes" imported="no">disk_interface.h</includes>
    <includes id="manifest__parser_8h" name="manifest_parser.h" local="yes" imported="no">manifest_parser.h</includes>
    <includes id="metrics_8h" name="metrics.h" local="yes" imported="no">metrics.h</includes>
    <includes id="state_8h" name="state.h" local="yes" imported="no">state.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <class kind="struct">EdgeEnv</class>
  </compound>
  <compound kind="file">
    <name>graph.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>graph_8h</filename>
    <includes id="eval__env_8h" name="eval_env.h" local="yes" imported="no">eval_env.h</includes>
    <includes id="timestamp_8h" name="timestamp.h" local="yes" imported="no">timestamp.h</includes>
    <class kind="struct">DependencyScan</class>
    <class kind="struct">Edge</class>
    <class kind="struct">ImplicitDepLoader</class>
    <class kind="struct">Node</class>
    <class kind="struct">Rule</class>
  </compound>
  <compound kind="file">
    <name>graph_test.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>graph__test_8cc</filename>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">graph.h</includes>
    <includes id="build_8h" name="build.h" local="yes" imported="no">build.h</includes>
    <includes id="test_8h" name="test.h" local="yes" imported="no">test.h</includes>
    <class kind="struct">GraphTest</class>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>graph__test_8cc.html</anchorfile>
      <anchor>ae4a824b98bb0e3fd42137844314c2ebb</anchor>
      <arglist>(GraphTest, MissingImplicit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>graph__test_8cc.html</anchorfile>
      <anchor>a36484d0b766fc2462290719e41a11063</anchor>
      <arglist>(GraphTest, ModifiedImplicit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>graph__test_8cc.html</anchorfile>
      <anchor>ad772806bb6f1e5dc59f2fd98d1597f11</anchor>
      <arglist>(GraphTest, FunkyMakefilePath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>graph__test_8cc.html</anchorfile>
      <anchor>adcf308ce63eceec942403d871e348748</anchor>
      <arglist>(GraphTest, ExplicitImplicit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>graph__test_8cc.html</anchorfile>
      <anchor>a9c18c2a191867b6f79a236d7d7c35aa5</anchor>
      <arglist>(GraphTest, PathWithCurrentDirectory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>graph__test_8cc.html</anchorfile>
      <anchor>ace589cda9b43d520a054ce407fd703a7</anchor>
      <arglist>(GraphTest, RootNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>graph__test_8cc.html</anchorfile>
      <anchor>a1e70689714609ae5d42e4d6c9a9b4cec</anchor>
      <arglist>(GraphTest, VarInOutPathEscaping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>graph__test_8cc.html</anchorfile>
      <anchor>abbd930b6b28fda6478c445ca336328fd</anchor>
      <arglist>(GraphTest, DepfileWithCanonicalizablePath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>graph__test_8cc.html</anchorfile>
      <anchor>accd75ce502e865f2e896cee05b59a1a7</anchor>
      <arglist>(GraphTest, DepfileRemoved)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>graph__test_8cc.html</anchorfile>
      <anchor>ae2e48c11ab2adc395211f0e907523679</anchor>
      <arglist>(GraphTest, RuleVariablesInScope)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>graph__test_8cc.html</anchorfile>
      <anchor>a4ffb4c3335b35654dac3891e30245415</anchor>
      <arglist>(GraphTest, DepfileOverride)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>graph__test_8cc.html</anchorfile>
      <anchor>ad6f8f516a73429e6586689b2d7a7f29d</anchor>
      <arglist>(GraphTest, DepfileOverrideParent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>graph__test_8cc.html</anchorfile>
      <anchor>a7080698fad79bfd22c1f53563890336a</anchor>
      <arglist>(GraphTest, NestedPhonyPrintsDone)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>graphviz.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>graphviz_8cc</filename>
    <includes id="graphviz_8h" name="graphviz.h" local="yes" imported="no">graphviz.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">graph.h</includes>
  </compound>
  <compound kind="file">
    <name>graphviz.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>graphviz_8h</filename>
    <class kind="struct">GraphViz</class>
  </compound>
  <compound kind="file">
    <name>hash_collision_bench.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>hash__collision__bench_8cc</filename>
    <includes id="build__log_8h" name="build_log.h" local="yes" imported="no">build_log.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>hash__collision__bench_8cc.html</anchorfile>
      <anchor>ae66f6b31b5ad750f1fe042a706a4e3d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>random</name>
      <anchorfile>hash__collision__bench_8cc.html</anchorfile>
      <anchor>abfe3987a983f1ab1916d176997f9d679</anchor>
      <arglist>(int low, int high)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RandomCommand</name>
      <anchorfile>hash__collision__bench_8cc.html</anchorfile>
      <anchor>a3fff54b9f122f48c7e23c7f8d5bbee8d</anchor>
      <arglist>(char **s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hash_map.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>hash__map_8h</filename>
    <includes id="string__piece_8h" name="string_piece.h" local="yes" imported="no">string_piece.h</includes>
    <class kind="struct">ExternalStringHashMap</class>
    <class kind="struct">__gnu_cxx::hash&lt; std::string &gt;</class>
    <class kind="struct">__gnu_cxx::hash&lt; StringPiece &gt;</class>
    <namespace>__gnu_cxx</namespace>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>MurmurHash2</name>
      <anchorfile>hash__map_8h.html</anchorfile>
      <anchor>a632965a5cf7730894c45b6d813dffdb9</anchor>
      <arglist>(const void *key, size_t len)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>includes_normalize-win32.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>includes__normalize-win32_8cc</filename>
    <includes id="includes__normalize_8h" name="includes_normalize.h" local="yes" imported="no">includes_normalize.h</includes>
    <includes id="string__piece_8h" name="string_piece.h" local="yes" imported="no">string_piece.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
  </compound>
  <compound kind="file">
    <name>includes_normalize.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>includes__normalize_8h</filename>
    <class kind="struct">IncludesNormalize</class>
  </compound>
  <compound kind="file">
    <name>includes_normalize_test.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>includes__normalize__test_8cc</filename>
    <includes id="includes__normalize_8h" name="includes_normalize.h" local="yes" imported="no">includes_normalize.h</includes>
    <includes id="test_8h" name="test.h" local="yes" imported="no">test.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>includes__normalize__test_8cc.html</anchorfile>
      <anchor>a39616dfb0dc833fa2864a8707bccf561</anchor>
      <arglist>(IncludesNormalize, Simple)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>includes__normalize__test_8cc.html</anchorfile>
      <anchor>a784464de0baf6a379666cfdeb0bd235e</anchor>
      <arglist>(IncludesNormalize, WithRelative)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>includes__normalize__test_8cc.html</anchorfile>
      <anchor>a4225c77472ec4065fdc483b3c7493b54</anchor>
      <arglist>(IncludesNormalize, Case)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>includes__normalize__test_8cc.html</anchorfile>
      <anchor>a786783379068717b5203eeaac72fed81</anchor>
      <arglist>(IncludesNormalize, Join)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>includes__normalize__test_8cc.html</anchorfile>
      <anchor>afea3db210665448d4e2a78a6f042c738</anchor>
      <arglist>(IncludesNormalize, Split)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>includes__normalize__test_8cc.html</anchorfile>
      <anchor>aa642b33f305a69822e7066ed80ec8b66</anchor>
      <arglist>(IncludesNormalize, ToLower)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>includes__normalize__test_8cc.html</anchorfile>
      <anchor>a4a7a079a8f90ed676bd27b3829744f64</anchor>
      <arglist>(IncludesNormalize, DifferentDrive)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lexer.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>lexer_8cc</filename>
    <includes id="lexer_8h" name="lexer.h" local="yes" imported="no">lexer.h</includes>
    <includes id="eval__env_8h" name="eval_env.h" local="yes" imported="no">eval_env.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
  </compound>
  <compound kind="file">
    <name>lexer.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>lexer_8h</filename>
    <includes id="string__piece_8h" name="string_piece.h" local="yes" imported="no">string_piece.h</includes>
    <class kind="struct">Lexer</class>
  </compound>
  <compound kind="file">
    <name>lexer.in.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>lexer_8in_8cc</filename>
    <includes id="lexer_8h" name="lexer.h" local="yes" imported="no">lexer.h</includes>
    <includes id="eval__env_8h" name="eval_env.h" local="yes" imported="no">eval_env.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
  </compound>
  <compound kind="file">
    <name>lexer_test.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>lexer__test_8cc</filename>
    <includes id="lexer_8h" name="lexer.h" local="yes" imported="no">lexer.h</includes>
    <includes id="eval__env_8h" name="eval_env.h" local="yes" imported="no">eval_env.h</includes>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>lexer__test_8cc.html</anchorfile>
      <anchor>a39e3e112e2216b1cef7a394e1913a0b1</anchor>
      <arglist>(Lexer, ReadVarValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>lexer__test_8cc.html</anchorfile>
      <anchor>ac0e1e0521fd96d123a614bd48578442e</anchor>
      <arglist>(Lexer, ReadEvalStringEscapes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>lexer__test_8cc.html</anchorfile>
      <anchor>a531272bf8525de39f5708198534a20e6</anchor>
      <arglist>(Lexer, ReadIdent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>lexer__test_8cc.html</anchorfile>
      <anchor>abc2d9d776328de93d8703d3f29bba8ac</anchor>
      <arglist>(Lexer, ReadIdentCurlies)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>lexer__test_8cc.html</anchorfile>
      <anchor>a20ae44b0787ffb640b9ec2a6c522db02</anchor>
      <arglist>(Lexer, Error)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>lexer__test_8cc.html</anchorfile>
      <anchor>a57f359ffbbc813cf202048f0fd829de4</anchor>
      <arglist>(Lexer, CommentEOF)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>lexer__test_8cc.html</anchorfile>
      <anchor>ae5270aba349503a9806314e9b715b92a</anchor>
      <arglist>(Lexer, Tabs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>line_printer.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>line__printer_8cc</filename>
    <includes id="line__printer_8h" name="line_printer.h" local="yes" imported="no">line_printer.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
  </compound>
  <compound kind="file">
    <name>line_printer.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>line__printer_8h</filename>
    <class kind="struct">LinePrinter</class>
  </compound>
  <compound kind="file">
    <name>manifest_parser.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>manifest__parser_8cc</filename>
    <includes id="manifest__parser_8h" name="manifest_parser.h" local="yes" imported="no">manifest_parser.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">graph.h</includes>
    <includes id="metrics_8h" name="metrics.h" local="yes" imported="no">metrics.h</includes>
    <includes id="state_8h" name="state.h" local="yes" imported="no">state.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <includes id="version_8h" name="version.h" local="yes" imported="no">version.h</includes>
  </compound>
  <compound kind="file">
    <name>manifest_parser.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>manifest__parser_8h</filename>
    <includes id="lexer_8h" name="lexer.h" local="yes" imported="no">lexer.h</includes>
    <class kind="struct">ManifestParser::FileReader</class>
    <class kind="struct">ManifestParser</class>
  </compound>
  <compound kind="file">
    <name>manifest_parser_perftest.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>manifest__parser__perftest_8cc</filename>
    <includes id="getopt_8h" name="getopt.h" local="no" imported="no">getopt.h</includes>
    <includes id="disk__interface_8h" name="disk_interface.h" local="yes" imported="no">disk_interface.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">graph.h</includes>
    <includes id="manifest__parser_8h" name="manifest_parser.h" local="yes" imported="no">manifest_parser.h</includes>
    <includes id="metrics_8h" name="metrics.h" local="yes" imported="no">metrics.h</includes>
    <includes id="state_8h" name="state.h" local="yes" imported="no">state.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <class kind="struct">RealFileReader</class>
    <member kind="function">
      <type>int</type>
      <name>LoadManifests</name>
      <anchorfile>manifest__parser__perftest_8cc.html</anchorfile>
      <anchor>a40595c8e2fbd976436296b930045b243</anchor>
      <arglist>(bool measure_command_evaluation)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>manifest__parser__perftest_8cc.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteFakeManifests</name>
      <anchorfile>manifest__parser__perftest_8cc.html</anchorfile>
      <anchor>a37a41c3060514191cf22fe5d708f773d</anchor>
      <arglist>(const string &amp;dir)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>manifest_parser_test.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>manifest__parser__test_8cc</filename>
    <includes id="manifest__parser_8h" name="manifest_parser.h" local="yes" imported="no">manifest_parser.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">graph.h</includes>
    <includes id="state_8h" name="state.h" local="yes" imported="no">state.h</includes>
    <class kind="struct">ParserTest</class>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a70997cefed3bb026523aff903efc79b0</anchor>
      <arglist>(ParserTest, Empty)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a28171a798a0bb7c32ace6dac4cb001cf</anchor>
      <arglist>(ParserTest, Rules)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a6e469cda9649dd89ab2ad5c084281b6d</anchor>
      <arglist>(ParserTest, RuleAttributes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a4a7d33535b73d05a49cd713b10350069</anchor>
      <arglist>(ParserTest, IgnoreIndentedComments)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a9ab507d3d54586731a27985de85d64da</anchor>
      <arglist>(ParserTest, IgnoreIndentedBlankLines)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>adecd065e3562998d606135664bc9525a</anchor>
      <arglist>(ParserTest, ResponseFiles)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>ae051fbb078c3f5ae0a528f2768818a96</anchor>
      <arglist>(ParserTest, InNewline)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a2847f4edf51d91dce1306601ae2d0682</anchor>
      <arglist>(ParserTest, Variables)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a093186df062f93de0ce390d3a72f6bfe</anchor>
      <arglist>(ParserTest, VariableScope)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a00d1cdb458da473855bdc30e4892cf3c</anchor>
      <arglist>(ParserTest, Continuation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a2bd09c522373e027f87cd54333292c44</anchor>
      <arglist>(ParserTest, Backslash)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>aec90b87cbd6266115309855b966541e9</anchor>
      <arglist>(ParserTest, Comment)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a9b395c3b8184fa41f60e7e558778e204</anchor>
      <arglist>(ParserTest, Dollars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a60e5e9b4594625774b236ec0a00efd80</anchor>
      <arglist>(ParserTest, EscapeSpaces)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>ac0079b4d19b7375fc5c353801e374223</anchor>
      <arglist>(ParserTest, CanonicalizeFile)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>ac1a45708fd3409fe3968baaa17b2126e</anchor>
      <arglist>(ParserTest, PathVariables)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a4b11ad770d5209994ca895c6153aba87</anchor>
      <arglist>(ParserTest, CanonicalizePaths)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>aba1e84c7ae2914e7a077c9ae7cff432a</anchor>
      <arglist>(ParserTest, ReservedWords)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a4c5af423b5fe4caa08bd42c2a2117c1d</anchor>
      <arglist>(ParserTest, Errors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a5d47625ad368608f49025661246c43fa</anchor>
      <arglist>(ParserTest, MissingInput)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a17d807700877152709ef9dcee94f740f</anchor>
      <arglist>(ParserTest, MultipleOutputs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a7ecc11fe4eb1c9359f69d69b9d171541</anchor>
      <arglist>(ParserTest, MultipleOutputsWithDeps)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>adf7ac4cfce25570bfee08364530afffd</anchor>
      <arglist>(ParserTest, SubNinja)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a981e63c0429538780d0ebad85efa7364</anchor>
      <arglist>(ParserTest, MissingSubNinja)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a75800a70e073c969c19485e042cafa40</anchor>
      <arglist>(ParserTest, DuplicateRuleInDifferentSubninjas)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a542a5b366e3fcdf2fcbd8540df6bd217</anchor>
      <arglist>(ParserTest, Include)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a766d6eda1ba5ceb63a7f0041fe35e597</anchor>
      <arglist>(ParserTest, BrokenInclude)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a625cd7b294eace118b97f6b57055959d</anchor>
      <arglist>(ParserTest, Implicit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a242c79d739a18eb8080ace709ce9798d</anchor>
      <arglist>(ParserTest, OrderOnly)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>a80bd67dbe8aa1e47b42914010f73cfe0</anchor>
      <arglist>(ParserTest, DefaultDefault)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>ad196afd64815d178720f584d3ce73039</anchor>
      <arglist>(ParserTest, DefaultStatements)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>aaa37416b0e501ae285fc3142266899c7</anchor>
      <arglist>(ParserTest, UTF8)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>manifest__parser__test_8cc.html</anchorfile>
      <anchor>aeebde3a213afcf3def5598ad1820230e</anchor>
      <arglist>(ParserTest, CRLF)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>metrics.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>metrics_8cc</filename>
    <includes id="metrics_8h" name="metrics.h" local="yes" imported="no">metrics.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <member kind="function">
      <type>int64_t</type>
      <name>GetTimeMillis</name>
      <anchorfile>metrics_8cc.html</anchorfile>
      <anchor>a139d0fe6387b9e230a9b8bb12d9b43b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Metrics *</type>
      <name>g_metrics</name>
      <anchorfile>metrics_8cc.html</anchorfile>
      <anchor>a10cec6b1d988b109006369a7360e1add</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>metrics.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>metrics_8h</filename>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <class kind="struct">Metric</class>
    <class kind="struct">Metrics</class>
    <class kind="struct">ScopedMetric</class>
    <class kind="struct">Stopwatch</class>
    <member kind="define">
      <type>#define</type>
      <name>METRIC_RECORD</name>
      <anchorfile>metrics_8h.html</anchorfile>
      <anchor>a7c19242938163dd11cedf62fdabd4ab6</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>GetTimeMillis</name>
      <anchorfile>metrics_8h.html</anchorfile>
      <anchor>a139d0fe6387b9e230a9b8bb12d9b43b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Metrics *</type>
      <name>g_metrics</name>
      <anchorfile>metrics_8h.html</anchorfile>
      <anchor>a10cec6b1d988b109006369a7360e1add</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>minidump-win32.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>minidump-win32_8cc</filename>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <member kind="typedef">
      <type>IN</type>
      <name>DWORD</name>
      <anchorfile>minidump-win32_8cc.html</anchorfile>
      <anchor>a976e4ee8a5d560b950e63ebcf583c773</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IN IN</type>
      <name>HANDLE</name>
      <anchorfile>minidump-win32_8cc.html</anchorfile>
      <anchor>a80271737d50feb2e2d81a211d97d677b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IN IN IN</type>
      <name>MINIDUMP_TYPE</name>
      <anchorfile>minidump-win32_8cc.html</anchorfile>
      <anchor>a8a010fa0e473673cf416ace85630a5e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IN IN IN IN CONST OPTIONAL IN CONST OPTIONAL IN CONST PMINIDUMP_CALLBACK_INFORMATION</type>
      <name>OPTIONAL</name>
      <anchorfile>minidump-win32_8cc.html</anchorfile>
      <anchor>aaf443073232fc82ebdc5dbacbfbee329</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IN IN IN IN CONST</type>
      <name>PMINIDUMP_EXCEPTION_INFORMATION</name>
      <anchorfile>minidump-win32_8cc.html</anchorfile>
      <anchor>a641111f700a66af2a0596c8d7d3ffb4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IN IN IN IN CONST OPTIONAL IN CONST</type>
      <name>PMINIDUMP_USER_STREAM_INFORMATION</name>
      <anchorfile>minidump-win32_8cc.html</anchorfile>
      <anchor>afa0f235b2691e210ff5912efe0bd6437</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>typedef</type>
      <name>BOOL</name>
      <anchorfile>minidump-win32_8cc.html</anchorfile>
      <anchor>a9a791c002e86ab7faa0d8b002ac42416</anchor>
      <arglist>(WINAPI *MiniDumpWriteDumpFunc)(IN HANDLE</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CreateWin32MiniDump</name>
      <anchorfile>minidump-win32_8cc.html</anchorfile>
      <anchor>ac24340735c50b90b9d623f9331a9bea5</anchor>
      <arglist>(_EXCEPTION_POINTERS *pep)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>msvc_helper-win32.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>msvc__helper-win32_8cc</filename>
    <includes id="msvc__helper_8h" name="msvc_helper.h" local="yes" imported="no">msvc_helper.h</includes>
    <includes id="includes__normalize_8h" name="includes_normalize.h" local="yes" imported="no">includes_normalize.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <member kind="function">
      <type>string</type>
      <name>EscapeForDepfile</name>
      <anchorfile>msvc__helper-win32_8cc.html</anchorfile>
      <anchor>a300d98ae05003710d74d83f46f8e7592</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>msvc_helper.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>msvc__helper_8h</filename>
    <class kind="struct">CLParser</class>
    <class kind="struct">CLWrapper</class>
    <member kind="function">
      <type>string</type>
      <name>EscapeForDepfile</name>
      <anchorfile>msvc__helper_8h.html</anchorfile>
      <anchor>a300d98ae05003710d74d83f46f8e7592</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>msvc_helper_main-win32.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>msvc__helper__main-win32_8cc</filename>
    <includes id="msvc__helper_8h" name="msvc_helper.h" local="yes" imported="no">msvc_helper.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <includes id="getopt_8h" name="getopt.h" local="yes" imported="no">getopt.h</includes>
    <member kind="function">
      <type>int</type>
      <name>MSVCHelperMain</name>
      <anchorfile>msvc__helper__main-win32_8cc.html</anchorfile>
      <anchor>a56e06a656aa4909a5f6498b87087d2c8</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>msvc_helper_test.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>msvc__helper__test_8cc</filename>
    <includes id="msvc__helper_8h" name="msvc_helper.h" local="yes" imported="no">msvc_helper.h</includes>
    <includes id="test_8h" name="test.h" local="yes" imported="no">test.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>msvc__helper__test_8cc.html</anchorfile>
      <anchor>a0b74ecdfaf73f335a3077359b71b6082</anchor>
      <arglist>(CLParserTest, ShowIncludes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>msvc__helper__test_8cc.html</anchorfile>
      <anchor>af2df99191de85e89b6481d698a480770</anchor>
      <arglist>(CLParserTest, FilterInputFilename)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>msvc__helper__test_8cc.html</anchorfile>
      <anchor>a53f48e512bbe68720fcf055a1f1a541b</anchor>
      <arglist>(CLParserTest, ParseSimple)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>msvc__helper__test_8cc.html</anchorfile>
      <anchor>af11c173a02f30ba760c1cc21d68691df</anchor>
      <arglist>(CLParserTest, ParseFilenameFilter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>msvc__helper__test_8cc.html</anchorfile>
      <anchor>a6ff3d969de00c7d43af39db36e04a71e</anchor>
      <arglist>(CLParserTest, ParseSystemInclude)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>msvc__helper__test_8cc.html</anchorfile>
      <anchor>af71bbe55225ccc262470aaf501f00b90</anchor>
      <arglist>(CLParserTest, DuplicatedHeader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>msvc__helper__test_8cc.html</anchorfile>
      <anchor>a6d835c0a62120350c2555e6e2fe9dd48</anchor>
      <arglist>(CLParserTest, DuplicatedHeaderPathConverted)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>msvc__helper__test_8cc.html</anchorfile>
      <anchor>abf52421453f12cceefba2c37de16e9af</anchor>
      <arglist>(CLParserTest, SpacesInFilename)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>msvc__helper__test_8cc.html</anchorfile>
      <anchor>a26a859ad0b8a55b333b30446a6104011</anchor>
      <arglist>(MSVCHelperTest, EnvBlock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>msvc__helper__test_8cc.html</anchorfile>
      <anchor>abbbfd10f3c61893955d399a3c4359f6b</anchor>
      <arglist>(MSVCHelperTest, NoReadOfStderr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ninja.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>ninja_8cc</filename>
    <includes id="getopt_8h" name="getopt.h" local="no" imported="no">getopt.h</includes>
    <includes id="browse_8h" name="browse.h" local="yes" imported="no">browse.h</includes>
    <includes id="build_8h" name="build.h" local="yes" imported="no">build.h</includes>
    <includes id="build__log_8h" name="build_log.h" local="yes" imported="no">build_log.h</includes>
    <includes id="deps__log_8h" name="deps_log.h" local="yes" imported="no">deps_log.h</includes>
    <includes id="clean_8h" name="clean.h" local="yes" imported="no">clean.h</includes>
    <includes id="debug__flags_8h" name="debug_flags.h" local="yes" imported="no">debug_flags.h</includes>
    <includes id="disk__interface_8h" name="disk_interface.h" local="yes" imported="no">disk_interface.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">graph.h</includes>
    <includes id="graphviz_8h" name="graphviz.h" local="yes" imported="no">graphviz.h</includes>
    <includes id="manifest__parser_8h" name="manifest_parser.h" local="yes" imported="no">manifest_parser.h</includes>
    <includes id="metrics_8h" name="metrics.h" local="yes" imported="no">metrics.h</includes>
    <includes id="state_8h" name="state.h" local="yes" imported="no">state.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <includes id="version_8h" name="version.h" local="yes" imported="no">version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ninja_8cc.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ninja_test.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>ninja__test_8cc</filename>
    <includes id="line__printer_8h" name="line_printer.h" local="yes" imported="no">line_printer.h</includes>
    <class kind="struct">LaconicPrinter</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ninja__test_8cc.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>StringPrintf</name>
      <anchorfile>ninja__test_8cc.html</anchorfile>
      <anchor>a92981a46cfd763852a9cb7343fa140a2</anchor>
      <arglist>(const char *format,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>state.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>state_8cc</filename>
    <includes id="state_8h" name="state.h" local="yes" imported="no">state.h</includes>
    <includes id="edit__distance_8h" name="edit_distance.h" local="yes" imported="no">edit_distance.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">graph.h</includes>
    <includes id="metrics_8h" name="metrics.h" local="yes" imported="no">metrics.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
  </compound>
  <compound kind="file">
    <name>state.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>state_8h</filename>
    <includes id="eval__env_8h" name="eval_env.h" local="yes" imported="no">eval_env.h</includes>
    <includes id="hash__map_8h" name="hash_map.h" local="yes" imported="no">hash_map.h</includes>
    <class kind="struct">Pool</class>
    <class kind="struct">State</class>
  </compound>
  <compound kind="file">
    <name>state_test.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>state__test_8cc</filename>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">graph.h</includes>
    <includes id="state_8h" name="state.h" local="yes" imported="no">state.h</includes>
  </compound>
  <compound kind="file">
    <name>string_piece.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>string__piece_8h</filename>
    <class kind="struct">StringPiece</class>
  </compound>
  <compound kind="file">
    <name>subprocess-posix.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>subprocess-posix_8cc</filename>
    <includes id="subprocess_8h" name="subprocess.h" local="yes" imported="no">subprocess.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
  </compound>
  <compound kind="file">
    <name>subprocess-win32.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>subprocess-win32_8cc</filename>
    <includes id="subprocess_8h" name="subprocess.h" local="yes" imported="no">subprocess.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
  </compound>
  <compound kind="file">
    <name>subprocess.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>subprocess_8h</filename>
    <includes id="exit__status_8h" name="exit_status.h" local="yes" imported="no">exit_status.h</includes>
    <class kind="struct">Subprocess</class>
    <class kind="struct">SubprocessSet</class>
  </compound>
  <compound kind="file">
    <name>subprocess_test.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>subprocess__test_8cc</filename>
    <includes id="subprocess_8h" name="subprocess.h" local="yes" imported="no">subprocess.h</includes>
    <includes id="test_8h" name="test.h" local="yes" imported="no">test.h</includes>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>subprocess__test_8cc.html</anchorfile>
      <anchor>a775f99b7e07e1594fca350359ab00a1b</anchor>
      <arglist>(SubprocessTest, BadCommandStderr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>subprocess__test_8cc.html</anchorfile>
      <anchor>a7f5a5ea57dbc10cd316d9df987ede893</anchor>
      <arglist>(SubprocessTest, NoSuchCommand)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>subprocess__test_8cc.html</anchorfile>
      <anchor>ae13fb35cc31a4332e3054c9bf897e203</anchor>
      <arglist>(SubprocessTest, InterruptChild)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>subprocess__test_8cc.html</anchorfile>
      <anchor>a11b360c2b8d984f7bd219a3c0b4ec802</anchor>
      <arglist>(SubprocessTest, InterruptParent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>subprocess__test_8cc.html</anchorfile>
      <anchor>adcfaad16d9f04763363b072bb0754f2d</anchor>
      <arglist>(SubprocessTest, Console)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>subprocess__test_8cc.html</anchorfile>
      <anchor>ac98552282f3b231a41e3fa3edd665620</anchor>
      <arglist>(SubprocessTest, SetWithSingle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>subprocess__test_8cc.html</anchorfile>
      <anchor>a21f43215ecf6c654a031a94126341d95</anchor>
      <arglist>(SubprocessTest, SetWithMulti)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>subprocess__test_8cc.html</anchorfile>
      <anchor>af4692f0a27d37c5427e270a29f641265</anchor>
      <arglist>(SubprocessTest, SetWithLots)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>subprocess__test_8cc.html</anchorfile>
      <anchor>a36a1f58b164c2b096b45ce91e368cbb7</anchor>
      <arglist>(SubprocessTest, ReadStdin)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>test_8cc</filename>
    <includes id="test_8h" name="test.h" local="yes" imported="no">test.h</includes>
    <includes id="build__log_8h" name="build_log.h" local="yes" imported="no">build_log.h</includes>
    <includes id="manifest__parser_8h" name="manifest_parser.h" local="yes" imported="no">manifest_parser.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <member kind="function">
      <type>void</type>
      <name>AssertHash</name>
      <anchorfile>test_8cc.html</anchorfile>
      <anchor>a6e882f13455aba9e51c294449387b72b</anchor>
      <arglist>(const char *expected, uint64_t actual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssertParse</name>
      <anchorfile>test_8cc.html</anchorfile>
      <anchor>afb20bae83c4de264129c46c005ad3907</anchor>
      <arglist>(State *state, const char *input)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>test_8h</filename>
    <includes id="disk__interface_8h" name="disk_interface.h" local="yes" imported="no">disk_interface.h</includes>
    <includes id="state_8h" name="state.h" local="yes" imported="no">state.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <class kind="struct">VirtualFileSystem::Entry</class>
    <class kind="struct">ScopedTempDir</class>
    <class kind="struct">StateTestWithBuiltinRules</class>
    <class kind="struct">VirtualFileSystem</class>
    <member kind="function">
      <type>void</type>
      <name>AssertHash</name>
      <anchorfile>test_8h.html</anchorfile>
      <anchor>a6e882f13455aba9e51c294449387b72b</anchor>
      <arglist>(const char *expected, uint64_t actual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssertParse</name>
      <anchorfile>test_8h.html</anchorfile>
      <anchor>afb20bae83c4de264129c46c005ad3907</anchor>
      <arglist>(State *state, const char *input)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>timestamp.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>timestamp_8h</filename>
    <member kind="typedef">
      <type>int</type>
      <name>TimeStamp</name>
      <anchorfile>timestamp_8h.html</anchorfile>
      <anchor>a364f6f32873dd70e259c971fc2e28b73</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>util.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>util_8cc</filename>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <includes id="edit__distance_8h" name="edit_distance.h" local="yes" imported="no">edit_distance.h</includes>
    <includes id="metrics_8h" name="metrics.h" local="yes" imported="no">metrics.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>CanonicalizePath</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>abdb5937692c9c5a0fbe6cbbab7941414</anchor>
      <arglist>(string *path, string *err)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CanonicalizePath</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>a27bef6168502194cff01450b0ddce51a</anchor>
      <arglist>(char *path, size_t *len, string *err)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ElideMiddle</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>ac8e2d9b3b582b06d8c2ecd55cf22d512</anchor>
      <arglist>(const string &amp;str, size_t width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Error</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>a8d48223b92317abcaf5984a00a97efb4</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Fatal</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>ad98ec6fb76f27b3d5a805cdad742df92</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetLoadAverage</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>afb09694f1319f261012f1851bbbb285b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetProcessorCount</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>a03a03c74e8b71b7ab09b1af533dc253f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetShellEscapedString</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>a5d89d1621913641fab23969f8665d3d5</anchor>
      <arglist>(const string &amp;input, string *result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetWin32EscapedString</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>a147fcbfb98ba43b1cb5a4739bf0c7702</anchor>
      <arglist>(const string &amp;input, string *result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsKnownShellSafeCharacter</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>a38e7f4f3b273c116d16ab33e6a065fa2</anchor>
      <arglist>(char ch)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsKnownWin32SafeCharacter</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>a4316c8580a35e3bedd6e76bba3343b58</anchor>
      <arglist>(char ch)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>islatinalpha</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>a004abead93a39ce70b226bea8fa39680</anchor>
      <arglist>(int c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReadFile</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>afa2642aae4af8af879417889a5e8f4f5</anchor>
      <arglist>(const string &amp;path, string *contents, string *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCloseOnExec</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>a946927145681d8bb8318f5a7c4dc57ae</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>SpellcheckString</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>a3e5761332ec67e6554262cb0d9cae4d0</anchor>
      <arglist>(const char *text,...)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>SpellcheckStringV</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>ad214b089117a607f2d7855404befab82</anchor>
      <arglist>(const string &amp;text, const vector&lt; const char * &gt; &amp;words)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>StringNeedsShellEscaping</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>a3ecae07db3444ba89a9c421fda0e657d</anchor>
      <arglist>(const string &amp;input)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>StringNeedsWin32Escaping</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>ab86d152a35ccd032649973e01b79f606</anchor>
      <arglist>(const string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>StripAnsiEscapeCodes</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>ab47e6d9b7e9e9f6a9d4560f148cd3643</anchor>
      <arglist>(const string &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Truncate</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>a59c00d43a10517c5124b75ef540f270a</anchor>
      <arglist>(const string &amp;path, size_t size, string *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Warning</name>
      <anchorfile>util_8cc.html</anchorfile>
      <anchor>aa92567b4012d3191db5d247c8db8e9d9</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>util.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>util_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>NORETURN</name>
      <anchorfile>util_8h.html</anchorfile>
      <anchor>aa1728270d73c5d1598de1fd691762eb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CanonicalizePath</name>
      <anchorfile>util_8h.html</anchorfile>
      <anchor>abdb5937692c9c5a0fbe6cbbab7941414</anchor>
      <arglist>(string *path, string *err)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CanonicalizePath</name>
      <anchorfile>util_8h.html</anchorfile>
      <anchor>a27bef6168502194cff01450b0ddce51a</anchor>
      <arglist>(char *path, size_t *len, string *err)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ElideMiddle</name>
      <anchorfile>util_8h.html</anchorfile>
      <anchor>ac8e2d9b3b582b06d8c2ecd55cf22d512</anchor>
      <arglist>(const string &amp;str, size_t width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Error</name>
      <anchorfile>util_8h.html</anchorfile>
      <anchor>a8d48223b92317abcaf5984a00a97efb4</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type>NORETURN void</type>
      <name>Fatal</name>
      <anchorfile>util_8h.html</anchorfile>
      <anchor>ae5fb7d249da6072c1f3e5e33b16a2b56</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetLoadAverage</name>
      <anchorfile>util_8h.html</anchorfile>
      <anchor>afb09694f1319f261012f1851bbbb285b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetProcessorCount</name>
      <anchorfile>util_8h.html</anchorfile>
      <anchor>a03a03c74e8b71b7ab09b1af533dc253f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetShellEscapedString</name>
      <anchorfile>util_8h.html</anchorfile>
      <anchor>a5d89d1621913641fab23969f8665d3d5</anchor>
      <arglist>(const string &amp;input, string *result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetWin32EscapedString</name>
      <anchorfile>util_8h.html</anchorfile>
      <anchor>a147fcbfb98ba43b1cb5a4739bf0c7702</anchor>
      <arglist>(const string &amp;input, string *result)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReadFile</name>
      <anchorfile>util_8h.html</anchorfile>
      <anchor>afa2642aae4af8af879417889a5e8f4f5</anchor>
      <arglist>(const string &amp;path, string *contents, string *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCloseOnExec</name>
      <anchorfile>util_8h.html</anchorfile>
      <anchor>a946927145681d8bb8318f5a7c4dc57ae</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>SpellcheckString</name>
      <anchorfile>util_8h.html</anchorfile>
      <anchor>a3e5761332ec67e6554262cb0d9cae4d0</anchor>
      <arglist>(const char *text,...)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>SpellcheckStringV</name>
      <anchorfile>util_8h.html</anchorfile>
      <anchor>ad214b089117a607f2d7855404befab82</anchor>
      <arglist>(const string &amp;text, const vector&lt; const char * &gt; &amp;words)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>StripAnsiEscapeCodes</name>
      <anchorfile>util_8h.html</anchorfile>
      <anchor>ab47e6d9b7e9e9f6a9d4560f148cd3643</anchor>
      <arglist>(const string &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Truncate</name>
      <anchorfile>util_8h.html</anchorfile>
      <anchor>a59c00d43a10517c5124b75ef540f270a</anchor>
      <arglist>(const string &amp;path, size_t size, string *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Warning</name>
      <anchorfile>util_8h.html</anchorfile>
      <anchor>aa92567b4012d3191db5d247c8db8e9d9</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>util_test.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>util__test_8cc</filename>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <includes id="test_8h" name="test.h" local="yes" imported="no">test.h</includes>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>util__test_8cc.html</anchorfile>
      <anchor>a0194425f5c89a3070ebe843cf3e6974d</anchor>
      <arglist>(CanonicalizePath, PathSamples)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>version.cc</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>version_8cc</filename>
    <includes id="version_8h" name="version.h" local="yes" imported="no">version.h</includes>
    <includes id="util_8h" name="util.h" local="yes" imported="no">util.h</includes>
    <member kind="function">
      <type>void</type>
      <name>CheckNinjaVersion</name>
      <anchorfile>version_8cc.html</anchorfile>
      <anchor>a02453fe5292a8d9759f328ed2aa4382a</anchor>
      <arglist>(const string &amp;version)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseVersion</name>
      <anchorfile>version_8cc.html</anchorfile>
      <anchor>ab3be464eddaa4a00b0d56731ab275e0c</anchor>
      <arglist>(const string &amp;version, int *major, int *minor)</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>kNinjaVersion</name>
      <anchorfile>version_8cc.html</anchorfile>
      <anchor>a38550eefd4f7cf3cf562fdc142eb918c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>version.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>version_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>CheckNinjaVersion</name>
      <anchorfile>version_8h.html</anchorfile>
      <anchor>a6dd99dfd8908a6d8c220d6ececd55b96</anchor>
      <arglist>(const string &amp;required_version)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseVersion</name>
      <anchorfile>version_8h.html</anchorfile>
      <anchor>ab3be464eddaa4a00b0d56731ab275e0c</anchor>
      <arglist>(const string &amp;version, int *major, int *minor)</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>kNinjaVersion</name>
      <anchorfile>version_8h.html</anchorfile>
      <anchor>a38550eefd4f7cf3cf562fdc142eb918c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>win32port.h</name>
    <path>/home/evanm/projects/ninja/src/</path>
    <filename>win32port_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>PRIu64</name>
      <anchorfile>win32port_8h.html</anchorfile>
      <anchor>ac582131d7a7c8ee57e73180d1714f9d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PRIx64</name>
      <anchorfile>win32port_8h.html</anchorfile>
      <anchor>aba38357387a474f439428dee1984fc5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed short</type>
      <name>int16_t</name>
      <anchorfile>win32port_8h.html</anchorfile>
      <anchor>a269259c924dce846340ddbb810db2e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed long long</type>
      <name>int64_t</name>
      <anchorfile>win32port_8h.html</anchorfile>
      <anchor>adec1df1b8b51cb32b77e5b86fff46471</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>uint16_t</name>
      <anchorfile>win32port_8h.html</anchorfile>
      <anchor>a273cf69d639a59973b6019625df33e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>uint64_t</name>
      <anchorfile>win32port_8h.html</anchorfile>
      <anchor>aaa5d1cd013383c889537491c3cfd9aad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BindingEnv</name>
    <filename>structBindingEnv.html</filename>
    <base>Env</base>
    <member kind="function">
      <type>void</type>
      <name>AddBinding</name>
      <anchorfile>structBindingEnv.html</anchorfile>
      <anchor>a211325035c6b322fc3df25f3b943fb66</anchor>
      <arglist>(const string &amp;key, const string &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BindingEnv</name>
      <anchorfile>structBindingEnv.html</anchorfile>
      <anchor>aa46e08738c7e15ef656683cc1ded4489</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BindingEnv</name>
      <anchorfile>structBindingEnv.html</anchorfile>
      <anchor>a573dc6ca38af4514aba84f8034f827a7</anchor>
      <arglist>(Env *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>LookupVariable</name>
      <anchorfile>structBindingEnv.html</anchorfile>
      <anchor>af858f0c4dc64fee67545ffabb18ee2bb</anchor>
      <arglist>(const string &amp;var)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>LookupWithFallback</name>
      <anchorfile>structBindingEnv.html</anchorfile>
      <anchor>ab866631fcbf9681786950c5377e1da84</anchor>
      <arglist>(const string &amp;var, const EvalString *eval, Env *env)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BindingEnv</name>
      <anchorfile>structBindingEnv.html</anchorfile>
      <anchor>af54aba77bfe2d28de4fcc8eb14e05aa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, string &gt;</type>
      <name>bindings_</name>
      <anchorfile>structBindingEnv.html</anchorfile>
      <anchor>aa809e9895e3fdb9a7a84cff11307abed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Env *</type>
      <name>parent_</name>
      <anchorfile>structBindingEnv.html</anchorfile>
      <anchor>a8d0a9ba09923c7160d0cbc1ff3dac6df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BuildConfig</name>
    <filename>structBuildConfig.html</filename>
    <member kind="enumeration">
      <name>Verbosity</name>
      <anchorfile>structBuildConfig.html</anchorfile>
      <anchor>a7a6581026821b221c12ccfc9203b4fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMAL</name>
      <anchorfile>structBuildConfig.html</anchorfile>
      <anchor>a7a6581026821b221c12ccfc9203b4fffad535fbc3bb4f9840e0cf11deebb65df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QUIET</name>
      <anchorfile>structBuildConfig.html</anchorfile>
      <anchor>a7a6581026821b221c12ccfc9203b4fffa77a8643bf70b1759e3c27a915cc42b92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VERBOSE</name>
      <anchorfile>structBuildConfig.html</anchorfile>
      <anchor>a7a6581026821b221c12ccfc9203b4fffa44ec2c4f7fd9233c06f434e56faf1874</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BuildConfig</name>
      <anchorfile>structBuildConfig.html</anchorfile>
      <anchor>aefc3e1180c9d6a19c176150b83103d28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>dry_run</name>
      <anchorfile>structBuildConfig.html</anchorfile>
      <anchor>aa65c3f1fe7e0faa2b05b36ed1743da5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>failures_allowed</name>
      <anchorfile>structBuildConfig.html</anchorfile>
      <anchor>a406984d40cde5afc338fe3b0cb9149c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max_load_average</name>
      <anchorfile>structBuildConfig.html</anchorfile>
      <anchor>a98a4cc988e1a82850fcfdbaab0a51570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>parallelism</name>
      <anchorfile>structBuildConfig.html</anchorfile>
      <anchor>aedc92d7f5d96f1c94c9cdfb2014ea2f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Verbosity</type>
      <name>verbosity</name>
      <anchorfile>structBuildConfig.html</anchorfile>
      <anchor>ae50beadfa54bab9ea78feb96f56431cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BuildDryRun</name>
    <filename>structBuildDryRun.html</filename>
    <base>BuildWithLogTest</base>
    <member kind="function">
      <type>void</type>
      <name>AddCatRule</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a42197db0a44e925718dda384627a030c</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BuildDryRun</name>
      <anchorfile>structBuildDryRun.html</anchorfile>
      <anchor>aa60bea1f4939ecaeafdb8ccd5315c6a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dirty</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a5c99bd787d394a683cbc696db30b47dd</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>GetNode</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a73a86246aefb2b8aeed71ac6979f37f3</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsPathDead</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a5c3c1c08918ca44732d95f0ee92c965d</anchor>
      <arglist>(StringPiece s) const </arglist>
    </member>
    <member kind="function">
      <type>BuildConfig</type>
      <name>MakeConfig</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a591bffbbff3975fb44ce22f16ae4427e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RebuildTarget</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>ad27d56c5529e734f05ed58a9d2dd5e53</anchor>
      <arglist>(const string &amp;target, const char *manifest, const char *log_path=NULL, const char *deps_path=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetUp</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a0a0b2e96c926a18274cfb9fe61d0dcd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>BuildLog</type>
      <name>build_log_</name>
      <anchorfile>structBuildWithLogTest.html</anchorfile>
      <anchor>a56e2338504aa14084cdc0ed015c8a3c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Builder</type>
      <name>builder_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a0fe0069156a94f69e378effdd4f382fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FakeCommandRunner</type>
      <name>command_runner_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a9e7a1dee7d0695b3f60c6deda9a6389e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BuildConfig</type>
      <name>config_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>adbf3fa7b00240708b88705af5f0eb5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VirtualFileSystem</type>
      <name>fs_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a9ea88eb9c32d3eb77b0df06696b2d529</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state_</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a7fc39f179dd0a7d578690ce03ed58e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BuildStatus</type>
      <name>status_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a0a29e0c309bcbebb2926a327a35de9f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Builder</name>
    <filename>structBuilder.html</filename>
    <member kind="function">
      <type>Node *</type>
      <name>AddTarget</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>aacbe026e5a186342d39939ea003e7ebc</anchor>
      <arglist>(const string &amp;name, string *err)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddTarget</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>a3b12ba4387f2886d0cdd86985e255af4</anchor>
      <arglist>(Node *target, string *err)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AlreadyUpToDate</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>a608d1a92e0970bf3c18f0512bb8b5c62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Build</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>a8c2b02f9c4f068cbb57c56052310a6c4</anchor>
      <arglist>(string *err)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Builder</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>a9e194d6607b036edb3f6e887e9b9cd49</anchor>
      <arglist>(State *state, const BuildConfig &amp;config, BuildLog *build_log, DepsLog *deps_log, DiskInterface *disk_interface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Cleanup</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>a4dd6ad3b2ead85478be0cb9656a2ad8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FinishCommand</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>a2fde50693215210a556a5bd82b0231d0</anchor>
      <arglist>(CommandRunner::Result *result, string *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBuildLog</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>aea861ef68a2a1c72370ba9a8c0bf1c17</anchor>
      <arglist>(BuildLog *log)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>StartEdge</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>a66ff07bb0a3afc4651c8cd362a90831e</anchor>
      <arglist>(Edge *edge, string *err)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Builder</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>a850f1a4be35da17638a4a1ef20bf1401</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>auto_ptr&lt; CommandRunner &gt;</type>
      <name>command_runner_</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>ac1c747be80fc038e88f14d98280b95f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BuildConfig &amp;</type>
      <name>config_</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>a982b2b7e9d5a7fcc3bf1082b1dfa8c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Plan</type>
      <name>plan_</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>a2de7a62776a4c75650e3411928d22018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>State *</type>
      <name>state_</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>a2c8ce0c9427c6bdc1084d3017d72a253</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BuildStatus *</type>
      <name>status_</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>a59667bcfda51f953a771430f4571b7c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Builder</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>ae520f13f1eff0edb5c6991c3cc1b8e01</anchor>
      <arglist>(const Builder &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>ExtractDeps</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>a1d1da3f88460e22b7f58aeaf1ad74b85</anchor>
      <arglist>(CommandRunner::Result *result, const string &amp;deps_type, const string &amp;deps_prefix, vector&lt; Node * &gt; *deps_nodes, string *err)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>a9f13eddfc1bfa5622f87e7b2033c481a</anchor>
      <arglist>(const Builder &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DiskInterface *</type>
      <name>disk_interface_</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>aafffa035b2c7c6c492648f136a86082c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DependencyScan</type>
      <name>scan_</name>
      <anchorfile>structBuilder.html</anchorfile>
      <anchor>af7f51c4af87bcef4d9fbc510af2a45a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BuildLog</name>
    <filename>structBuildLog.html</filename>
    <class kind="struct">BuildLog::LogEntry</class>
    <member kind="typedef">
      <type>ExternalStringHashMap&lt; LogEntry * &gt;::Type</type>
      <name>Entries</name>
      <anchorfile>structBuildLog.html</anchorfile>
      <anchor>a2c035db06262912249057dd122a86833</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BuildLog</name>
      <anchorfile>structBuildLog.html</anchorfile>
      <anchor>a6501970e59544a895c05a9f776320de5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Close</name>
      <anchorfile>structBuildLog.html</anchorfile>
      <anchor>a2f0657ed16b8ba9fadfb5c03e0c81695</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Entries &amp;</type>
      <name>entries</name>
      <anchorfile>structBuildLog.html</anchorfile>
      <anchor>aeed1beb5b39306e0a77dc6b8da16f580</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Load</name>
      <anchorfile>structBuildLog.html</anchorfile>
      <anchor>a0e7f4786ae2aee38095cd7eeed87af73</anchor>
      <arglist>(const string &amp;path, string *err)</arglist>
    </member>
    <member kind="function">
      <type>LogEntry *</type>
      <name>LookupByOutput</name>
      <anchorfile>structBuildLog.html</anchorfile>
      <anchor>af01fac6ff13246e414e69b3737692f59</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OpenForWrite</name>
      <anchorfile>structBuildLog.html</anchorfile>
      <anchor>a4d345335c0495d843bd906305cc95ef9</anchor>
      <arglist>(const string &amp;path, const BuildLogUser &amp;user, string *err)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Recompact</name>
      <anchorfile>structBuildLog.html</anchorfile>
      <anchor>a27cb04969d1497d5e3f66981a6b639e1</anchor>
      <arglist>(const string &amp;path, const BuildLogUser &amp;user, string *err)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RecordCommand</name>
      <anchorfile>structBuildLog.html</anchorfile>
      <anchor>a0f6053fff49c2044bbfb0b6293d31d9f</anchor>
      <arglist>(Edge *edge, int start_time, int end_time, TimeStamp restat_mtime=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteEntry</name>
      <anchorfile>structBuildLog.html</anchorfile>
      <anchor>a9ecfb3911719e31c05331d4b142014ce</anchor>
      <arglist>(FILE *f, const LogEntry &amp;entry)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BuildLog</name>
      <anchorfile>structBuildLog.html</anchorfile>
      <anchor>a2d5fc7e9bcbaf8900e2fb671e1ebea6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Entries</type>
      <name>entries_</name>
      <anchorfile>structBuildLog.html</anchorfile>
      <anchor>af537a7382a1d904e6c5522055e45cd36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FILE *</type>
      <name>log_file_</name>
      <anchorfile>structBuildLog.html</anchorfile>
      <anchor>a5fd4ee55ca61796e6d9aecaac2855cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>needs_recompaction_</name>
      <anchorfile>structBuildLog.html</anchorfile>
      <anchor>ab3726d9da8e8ae709671c6e6f3518773</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BuildLog::LogEntry</name>
    <filename>structBuildLog_1_1LogEntry.html</filename>
    <member kind="function">
      <type></type>
      <name>LogEntry</name>
      <anchorfile>structBuildLog_1_1LogEntry.html</anchorfile>
      <anchor>a4286cf5ee2b1db6f037bdbf84194ef96</anchor>
      <arglist>(const string &amp;output)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogEntry</name>
      <anchorfile>structBuildLog_1_1LogEntry.html</anchorfile>
      <anchor>ae4521674e6b809ca02ff794f667acd24</anchor>
      <arglist>(const string &amp;output, uint64_t command_hash, int start_time, int end_time, TimeStamp restat_mtime)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structBuildLog_1_1LogEntry.html</anchorfile>
      <anchor>afe5b06b8135336c86d91f56c8423f74b</anchor>
      <arglist>(const LogEntry &amp;o)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint64_t</type>
      <name>HashCommand</name>
      <anchorfile>structBuildLog_1_1LogEntry.html</anchorfile>
      <anchor>ae0eac149dc741c167cd03997adb0be3c</anchor>
      <arglist>(StringPiece command)</arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>command_hash</name>
      <anchorfile>structBuildLog_1_1LogEntry.html</anchorfile>
      <anchor>a63b46f6a3f2b4abde94d8da03ace6fe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>end_time</name>
      <anchorfile>structBuildLog_1_1LogEntry.html</anchorfile>
      <anchor>a8c9d71c8162925f8fe519543d3fb1416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>output</name>
      <anchorfile>structBuildLog_1_1LogEntry.html</anchorfile>
      <anchor>ab83065a7478526bcb4c5b2544b5f078a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeStamp</type>
      <name>restat_mtime</name>
      <anchorfile>structBuildLog_1_1LogEntry.html</anchorfile>
      <anchor>a53e61192b91f9ac323d507ca624eb9e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>start_time</name>
      <anchorfile>structBuildLog_1_1LogEntry.html</anchorfile>
      <anchor>a2ba1f4c7b480857f4b54be8ff28db9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BuildLogUser</name>
    <filename>structBuildLogUser.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsPathDead</name>
      <anchorfile>structBuildLogUser.html</anchorfile>
      <anchor>a4d0f24aa0363aa050c1f338e064a8cac</anchor>
      <arglist>(StringPiece s) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BuildStatus</name>
    <filename>structBuildStatus.html</filename>
    <class kind="struct">BuildStatus::RateInfo</class>
    <class kind="struct">BuildStatus::SlidingRateInfo</class>
    <member kind="function">
      <type>void</type>
      <name>BuildEdgeFinished</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>aa43abc4269585826ca8170480ff79ba3</anchor>
      <arglist>(Edge *edge, bool success, const string &amp;output, int *start_time, int *end_time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildEdgeStarted</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>a1ed5751d12fec96d3d0fd53d0b04a162</anchor>
      <arglist>(Edge *edge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildFinished</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>a00dd8e697c15555193d0d787b0776ea5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BuildStatus</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>ae0ee802c831f69a934e6d2205698e600</anchor>
      <arglist>(const BuildConfig &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>FormatProgressStatus</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>aa3bc463d995bd29e80f90fbb4b43d9c3</anchor>
      <arglist>(const char *progress_status_format) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PlanHasTotalEdges</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>a46706e3daf217f32bd3edd90371586d9</anchor>
      <arglist>(int total)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>map&lt; Edge *, int &gt;</type>
      <name>RunningEdgeMap</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>ab7b1138530a4b0d2e4c6ac9825747c69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>PrintStatus</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>a86a9921153c374661952003d57aff718</anchor>
      <arglist>(Edge *edge)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>snprinfRate</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>a4d4ab0031d61a13e5df8218c1d76766d</anchor>
      <arglist>(double rate, char(&amp;buf)[S], const char *format) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BuildConfig &amp;</type>
      <name>config_</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>accbad5074966766fd07e53117223fe35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SlidingRateInfo</type>
      <name>current_rate_</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>a4aa6198b39f8f11782fd21844068224d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>finished_edges_</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>ac552d96d99005f0ba37477f67e1c6f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RateInfo</type>
      <name>overall_rate_</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>a8025fa54de1dbfd17d69561f55b9365f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LinePrinter</type>
      <name>printer_</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>ad5ccf83d3e632bcaef8fd1763a80a6fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>progress_status_format_</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>af4f22094c77bc001cd94b2c2b07f5be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RunningEdgeMap</type>
      <name>running_edges_</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>a8f56bb2d34a27c67c647529494679bf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int64_t</type>
      <name>start_time_millis_</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>a148800f341d080cf65430b7369110344</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>started_edges_</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>a4d456bf8d06d793d99f7a927a573ffad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>total_edges_</name>
      <anchorfile>structBuildStatus.html</anchorfile>
      <anchor>af9db9889e39e2deb6d76488087b4bfe3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BuildStatus::RateInfo</name>
    <filename>structBuildStatus_1_1RateInfo.html</filename>
    <member kind="function">
      <type>double</type>
      <name>Elapsed</name>
      <anchorfile>structBuildStatus_1_1RateInfo.html</anchorfile>
      <anchor>a8c7d05ff4f8ebd917d93b3fcd8aaec4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rate</name>
      <anchorfile>structBuildStatus_1_1RateInfo.html</anchorfile>
      <anchor>aa44340d66f1b1f7697a293fc7896fd6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RateInfo</name>
      <anchorfile>structBuildStatus_1_1RateInfo.html</anchorfile>
      <anchor>a8699c84d6b6be7d34de125c0999e076f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restart</name>
      <anchorfile>structBuildStatus_1_1RateInfo.html</anchorfile>
      <anchor>a0f5dd9f010246a1c96a52e082659260d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateRate</name>
      <anchorfile>structBuildStatus_1_1RateInfo.html</anchorfile>
      <anchor>a05c38ec0e852ce111f8a660e7bb14000</anchor>
      <arglist>(int edges)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rate_</name>
      <anchorfile>structBuildStatus_1_1RateInfo.html</anchorfile>
      <anchor>aa43afc2a3ac5311e4eb1345d441b6549</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Stopwatch</type>
      <name>stopwatch_</name>
      <anchorfile>structBuildStatus_1_1RateInfo.html</anchorfile>
      <anchor>ad038097003ddc1311346629681f8fa38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BuildStatus::SlidingRateInfo</name>
    <filename>structBuildStatus_1_1SlidingRateInfo.html</filename>
    <member kind="function">
      <type>double</type>
      <name>rate</name>
      <anchorfile>structBuildStatus_1_1SlidingRateInfo.html</anchorfile>
      <anchor>abe0c32fc67f0eb3872471f8f9463d2a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restart</name>
      <anchorfile>structBuildStatus_1_1SlidingRateInfo.html</anchorfile>
      <anchor>af9b3f7ff5e6b570dc8827f7c701c0103</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SlidingRateInfo</name>
      <anchorfile>structBuildStatus_1_1SlidingRateInfo.html</anchorfile>
      <anchor>a19d6c9c13f3b45a300a645bbc5c0bb9e</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateRate</name>
      <anchorfile>structBuildStatus_1_1SlidingRateInfo.html</anchorfile>
      <anchor>a90f0b44f04ee69939c606855b95ec5d6</anchor>
      <arglist>(int update_hint)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>last_update_</name>
      <anchorfile>structBuildStatus_1_1SlidingRateInfo.html</anchorfile>
      <anchor>a0d501a6e79b99c2b5d3e5a6a96d2cd4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const size_t</type>
      <name>N</name>
      <anchorfile>structBuildStatus_1_1SlidingRateInfo.html</anchorfile>
      <anchor>a2d0d4443b17c342e0fc0df1e9b2007cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rate_</name>
      <anchorfile>structBuildStatus_1_1SlidingRateInfo.html</anchorfile>
      <anchor>ab9895fa393351ac017cc8c31e40b4e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Stopwatch</type>
      <name>stopwatch_</name>
      <anchorfile>structBuildStatus_1_1SlidingRateInfo.html</anchorfile>
      <anchor>ac1e7ff77c3cb348375d5d44c35bab660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>queue&lt; double &gt;</type>
      <name>times_</name>
      <anchorfile>structBuildStatus_1_1SlidingRateInfo.html</anchorfile>
      <anchor>a06ea2bb9c19c66ac53a551aec9bb9b8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BuildTest</name>
    <filename>structBuildTest.html</filename>
    <base>StateTestWithBuiltinRules</base>
    <base>BuildLogUser</base>
    <member kind="function">
      <type>void</type>
      <name>AddCatRule</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a42197db0a44e925718dda384627a030c</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BuildTest</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a8a3ce55f78c94bd43af5d6e9f9fc6699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dirty</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a5c99bd787d394a683cbc696db30b47dd</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>GetNode</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a73a86246aefb2b8aeed71ac6979f37f3</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsPathDead</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a5c3c1c08918ca44732d95f0ee92c965d</anchor>
      <arglist>(StringPiece s) const </arglist>
    </member>
    <member kind="function">
      <type>BuildConfig</type>
      <name>MakeConfig</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a591bffbbff3975fb44ce22f16ae4427e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RebuildTarget</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>ad27d56c5529e734f05ed58a9d2dd5e53</anchor>
      <arglist>(const string &amp;target, const char *manifest, const char *log_path=NULL, const char *deps_path=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetUp</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a0a0b2e96c926a18274cfb9fe61d0dcd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BuildTest</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a6e5a170e14e3be6e530a615035120c66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Builder</type>
      <name>builder_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a0fe0069156a94f69e378effdd4f382fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FakeCommandRunner</type>
      <name>command_runner_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a9e7a1dee7d0695b3f60c6deda9a6389e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BuildConfig</type>
      <name>config_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>adbf3fa7b00240708b88705af5f0eb5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VirtualFileSystem</type>
      <name>fs_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a9ea88eb9c32d3eb77b0df06696b2d529</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state_</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a7fc39f179dd0a7d578690ce03ed58e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BuildStatus</type>
      <name>status_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a0a29e0c309bcbebb2926a327a35de9f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BuildWithDepsLogTest</name>
    <filename>structBuildWithDepsLogTest.html</filename>
    <base>BuildTest</base>
    <member kind="function">
      <type>void</type>
      <name>AddCatRule</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a42197db0a44e925718dda384627a030c</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BuildWithDepsLogTest</name>
      <anchorfile>structBuildWithDepsLogTest.html</anchorfile>
      <anchor>a36e6350b0b0a51dd75ba698fc6017547</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dirty</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a5c99bd787d394a683cbc696db30b47dd</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>GetNode</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a73a86246aefb2b8aeed71ac6979f37f3</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsPathDead</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a5c3c1c08918ca44732d95f0ee92c965d</anchor>
      <arglist>(StringPiece s) const </arglist>
    </member>
    <member kind="function">
      <type>BuildConfig</type>
      <name>MakeConfig</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a591bffbbff3975fb44ce22f16ae4427e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RebuildTarget</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>ad27d56c5529e734f05ed58a9d2dd5e53</anchor>
      <arglist>(const string &amp;target, const char *manifest, const char *log_path=NULL, const char *deps_path=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetUp</name>
      <anchorfile>structBuildWithDepsLogTest.html</anchorfile>
      <anchor>a29da158e1452c8f75e7f98f17e7a35e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TearDown</name>
      <anchorfile>structBuildWithDepsLogTest.html</anchorfile>
      <anchor>a86092bf2f0d5cde3175fd103fca8db50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>builder_</name>
      <anchorfile>structBuildWithDepsLogTest.html</anchorfile>
      <anchor>a02db0bea559a528f2da6d91e96df2e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FakeCommandRunner</type>
      <name>command_runner_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a9e7a1dee7d0695b3f60c6deda9a6389e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BuildConfig</type>
      <name>config_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>adbf3fa7b00240708b88705af5f0eb5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VirtualFileSystem</type>
      <name>fs_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a9ea88eb9c32d3eb77b0df06696b2d529</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state_</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a7fc39f179dd0a7d578690ce03ed58e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BuildStatus</type>
      <name>status_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a0a29e0c309bcbebb2926a327a35de9f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ScopedTempDir</type>
      <name>temp_dir_</name>
      <anchorfile>structBuildWithDepsLogTest.html</anchorfile>
      <anchor>a4e6ea21f48f79cc49d19f6b5af485603</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BuildWithLogTest</name>
    <filename>structBuildWithLogTest.html</filename>
    <base>BuildTest</base>
    <member kind="function">
      <type>void</type>
      <name>AddCatRule</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a42197db0a44e925718dda384627a030c</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BuildWithLogTest</name>
      <anchorfile>structBuildWithLogTest.html</anchorfile>
      <anchor>a8e56542ec0fcfaa49ebf3b6c32699b96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dirty</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a5c99bd787d394a683cbc696db30b47dd</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>GetNode</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a73a86246aefb2b8aeed71ac6979f37f3</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsPathDead</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a5c3c1c08918ca44732d95f0ee92c965d</anchor>
      <arglist>(StringPiece s) const </arglist>
    </member>
    <member kind="function">
      <type>BuildConfig</type>
      <name>MakeConfig</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a591bffbbff3975fb44ce22f16ae4427e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RebuildTarget</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>ad27d56c5529e734f05ed58a9d2dd5e53</anchor>
      <arglist>(const string &amp;target, const char *manifest, const char *log_path=NULL, const char *deps_path=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetUp</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a0a0b2e96c926a18274cfb9fe61d0dcd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>BuildLog</type>
      <name>build_log_</name>
      <anchorfile>structBuildWithLogTest.html</anchorfile>
      <anchor>a56e2338504aa14084cdc0ed015c8a3c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Builder</type>
      <name>builder_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a0fe0069156a94f69e378effdd4f382fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FakeCommandRunner</type>
      <name>command_runner_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a9e7a1dee7d0695b3f60c6deda9a6389e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BuildConfig</type>
      <name>config_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>adbf3fa7b00240708b88705af5f0eb5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VirtualFileSystem</type>
      <name>fs_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a9ea88eb9c32d3eb77b0df06696b2d529</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state_</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a7fc39f179dd0a7d578690ce03ed58e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BuildStatus</type>
      <name>status_</name>
      <anchorfile>structBuildTest.html</anchorfile>
      <anchor>a0a29e0c309bcbebb2926a327a35de9f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Cleaner</name>
    <filename>structCleaner.html</filename>
    <member kind="function">
      <type>int</type>
      <name>CleanAll</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>aee224f1e7c956ac8d9ad5280209434ad</anchor>
      <arglist>(bool generator=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cleaned_files_count</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>af4b0d5cb3c426f05e96c1222f724b880</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cleaner</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>aa54754b39f27d5d566ce62bea4b814cc</anchor>
      <arglist>(State *state, const BuildConfig &amp;config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cleaner</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>a94b3e75dcc18d20d1fc0f075cf8d2a7a</anchor>
      <arglist>(State *state, const BuildConfig &amp;config, DiskInterface *disk_interface)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CleanRule</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>a0d7bcd7981b24ae786dd6654157b5978</anchor>
      <arglist>(const Rule *rule)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CleanRule</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>ae02b542aa069eeb2c4b86d648263c2dd</anchor>
      <arglist>(const char *rule)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CleanRules</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>a77d3abb9b7062c1e8c86fe5ac9fb44c6</anchor>
      <arglist>(int rule_count, char *rules[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CleanTarget</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>a146f242991cf962752883da58c86d77c</anchor>
      <arglist>(Node *target)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CleanTarget</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>a9c71bc91ab523bdb54c29effe283136c</anchor>
      <arglist>(const char *target)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CleanTargets</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>adac9772fff3969b8e4b53706cc4dd868</anchor>
      <arglist>(int target_count, char *targets[])</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsVerbose</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>a197944f3ef71b02a07639970d45ca0f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>DoCleanRule</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>a980cadf4f6cea5dd6d52c4218e4e646b</anchor>
      <arglist>(const Rule *rule)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>DoCleanTarget</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>a52c3095504e05303ec7eee008197e98c</anchor>
      <arglist>(Node *target)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>FileExists</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>a90549dd5f5033f36a7620dc16609a970</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>IsAlreadyRemoved</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>a1b9ca5874a08b927ed8ed0476ccd3769</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>PrintFooter</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>a1a85c3e4741da1685692c5f6dd0ab789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>PrintHeader</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>afe60abac766fe0a45ffb1553a2987068</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Remove</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>acd6bbb9d1e7600cec3f72d9c61a8c7cd</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>RemoveEdgeFiles</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>a1b342a16b764170b4a07991fdf7c02fb</anchor>
      <arglist>(Edge *edge)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>RemoveFile</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>ae8da968f18aa9fe94f4405f3db37079b</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Report</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>a6ef489fdbf9b34900d6d110e7bd22444</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>a84a7c68251cfc3839ac97a90654e30b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>set&lt; Node * &gt;</type>
      <name>cleaned_</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>ab6a907a608b64d7c5fe9dda563f43b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>cleaned_files_count_</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>a202474ca14ab8841e0787eccce578cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BuildConfig &amp;</type>
      <name>config_</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>a061286ab1f16948224de40fcf042fd8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DiskInterface *</type>
      <name>disk_interface_</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>af1d5636bb9e186068d73b1923f73a92b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>set&lt; string &gt;</type>
      <name>removed_</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>a49c672178809c2ff602d56ac8a9cb1f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>State *</type>
      <name>state_</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>af18bfb0e6a405d23537bce721ec46fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>status_</name>
      <anchorfile>structCleaner.html</anchorfile>
      <anchor>ae33166af3dc8173e45d6e2dc78b1477d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CleanTest</name>
    <filename>structCleanTest.html</filename>
    <base>StateTestWithBuiltinRules</base>
    <member kind="function">
      <type>void</type>
      <name>AddCatRule</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a42197db0a44e925718dda384627a030c</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>GetNode</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a73a86246aefb2b8aeed71ac6979f37f3</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetUp</name>
      <anchorfile>structCleanTest.html</anchorfile>
      <anchor>ac95281eac4477b1a3a3a19496d21fee5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>BuildConfig</type>
      <name>config_</name>
      <anchorfile>structCleanTest.html</anchorfile>
      <anchor>a361d70919a53fecdea9123a349275f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VirtualFileSystem</type>
      <name>fs_</name>
      <anchorfile>structCleanTest.html</anchorfile>
      <anchor>ae9d626581c2a6623ab5b55eefb2f21cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state_</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a7fc39f179dd0a7d578690ce03ed58e87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CLParser</name>
    <filename>structCLParser.html</filename>
    <member kind="function">
      <type>string</type>
      <name>Parse</name>
      <anchorfile>structCLParser.html</anchorfile>
      <anchor>a4f374d6ed6eeba338560c98e210bdbe0</anchor>
      <arglist>(const string &amp;output, const string &amp;deps_prefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>FilterInputFilename</name>
      <anchorfile>structCLParser.html</anchorfile>
      <anchor>a9e815fc99c4c0e69149dfa2b02a0e687</anchor>
      <arglist>(string line)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>FilterShowIncludes</name>
      <anchorfile>structCLParser.html</anchorfile>
      <anchor>a1367b95724c75f733778e3011dd614f2</anchor>
      <arglist>(const string &amp;line, const string &amp;deps_prefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsSystemInclude</name>
      <anchorfile>structCLParser.html</anchorfile>
      <anchor>a6a36a893fc2f8e9a8b9914ccc27afd49</anchor>
      <arglist>(string path)</arglist>
    </member>
    <member kind="variable">
      <type>set&lt; string &gt;</type>
      <name>includes_</name>
      <anchorfile>structCLParser.html</anchorfile>
      <anchor>a772a95d9eb98502582d85f968c836ea5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CLWrapper</name>
    <filename>structCLWrapper.html</filename>
    <member kind="function">
      <type></type>
      <name>CLWrapper</name>
      <anchorfile>structCLWrapper.html</anchorfile>
      <anchor>a4f1f01691267f50cb4e42453572d11a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Run</name>
      <anchorfile>structCLWrapper.html</anchorfile>
      <anchor>a5e11f246c0f1b9dd491b377a92b56ceb</anchor>
      <arglist>(const string &amp;command, string *output)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnvBlock</name>
      <anchorfile>structCLWrapper.html</anchorfile>
      <anchor>af33715b81c86f13894321539553908fa</anchor>
      <arglist>(void *env_block)</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>env_block_</name>
      <anchorfile>structCLWrapper.html</anchorfile>
      <anchor>a383b28c057951ec7579a3ac76618c718</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CommandRunner</name>
    <filename>structCommandRunner.html</filename>
    <class kind="struct">CommandRunner::Result</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Abort</name>
      <anchorfile>structCommandRunner.html</anchorfile>
      <anchor>ac6db09b2544f7af67d2b9eae2552bc48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>CanRunMore</name>
      <anchorfile>structCommandRunner.html</anchorfile>
      <anchor>a210f0111087ec050ad9f301f9e6d98f9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vector&lt; Edge * &gt;</type>
      <name>GetActiveEdges</name>
      <anchorfile>structCommandRunner.html</anchorfile>
      <anchor>a6a6b452fd3fc92d7e7bc44531e5115ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>StartCommand</name>
      <anchorfile>structCommandRunner.html</anchorfile>
      <anchor>a23a37c5157518ed35fd1a366b1ab3d78</anchor>
      <arglist>(Edge *edge)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>WaitForCommand</name>
      <anchorfile>structCommandRunner.html</anchorfile>
      <anchor>aa0148009ad016cf44bbfbe8c8e16d1eb</anchor>
      <arglist>(Result *result)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CommandRunner</name>
      <anchorfile>structCommandRunner.html</anchorfile>
      <anchor>adfd406f68aa57e3a0360d8e96cf9355b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CommandRunner::Result</name>
    <filename>structCommandRunner_1_1Result.html</filename>
    <member kind="function">
      <type></type>
      <name>Result</name>
      <anchorfile>structCommandRunner_1_1Result.html</anchorfile>
      <anchor>a590a9902727bc763db1de355ea92b24e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>success</name>
      <anchorfile>structCommandRunner_1_1Result.html</anchorfile>
      <anchor>ad4283c7bdc514c0bf13b1381b88649b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Edge *</type>
      <name>edge</name>
      <anchorfile>structCommandRunner_1_1Result.html</anchorfile>
      <anchor>adb9fd7e95137586d3c7269062f8be370</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>output</name>
      <anchorfile>structCommandRunner_1_1Result.html</anchorfile>
      <anchor>aaf9cc90fe396b53c2b817f8cb4f0200a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ExitStatus</type>
      <name>status</name>
      <anchorfile>structCommandRunner_1_1Result.html</anchorfile>
      <anchor>a0ef27a9814ba5a28aa6390b0a4f66c6c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DependencyScan</name>
    <filename>structDependencyScan.html</filename>
    <member kind="function">
      <type>BuildLog *</type>
      <name>build_log</name>
      <anchorfile>structDependencyScan.html</anchorfile>
      <anchor>ad713a2aebbb6fcdc3c9c50f183f1113d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DependencyScan</name>
      <anchorfile>structDependencyScan.html</anchorfile>
      <anchor>a5cdb50332662d4bf3f57e33c35b8a2b5</anchor>
      <arglist>(State *state, BuildLog *build_log, DepsLog *deps_log, DiskInterface *disk_interface)</arglist>
    </member>
    <member kind="function">
      <type>DepsLog *</type>
      <name>deps_log</name>
      <anchorfile>structDependencyScan.html</anchorfile>
      <anchor>a93a181c6506df4f192baf39cbadbed0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RecomputeDirty</name>
      <anchorfile>structDependencyScan.html</anchorfile>
      <anchor>aa4c172a1d437ec83d27635262be88981</anchor>
      <arglist>(Edge *edge, string *err)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RecomputeOutputsDirty</name>
      <anchorfile>structDependencyScan.html</anchorfile>
      <anchor>a0b1ec300b10142efc8559a235c4f7555</anchor>
      <arglist>(Edge *edge, Node *most_recent_input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_build_log</name>
      <anchorfile>structDependencyScan.html</anchorfile>
      <anchor>a23ecdbf0f9e1154605c34c67c6406110</anchor>
      <arglist>(BuildLog *log)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>RecomputeOutputDirty</name>
      <anchorfile>structDependencyScan.html</anchorfile>
      <anchor>ad426b831c9123de9c94da728e3dab9ef</anchor>
      <arglist>(Edge *edge, Node *most_recent_input, const string &amp;command, Node *output)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BuildLog *</type>
      <name>build_log_</name>
      <anchorfile>structDependencyScan.html</anchorfile>
      <anchor>a1371f370f69a9f515b593912f6872f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ImplicitDepLoader</type>
      <name>dep_loader_</name>
      <anchorfile>structDependencyScan.html</anchorfile>
      <anchor>addb3a5e9cfcdee111ec37f4b5be8dc36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DiskInterface *</type>
      <name>disk_interface_</name>
      <anchorfile>structDependencyScan.html</anchorfile>
      <anchor>a62e78e027296932fc65a996a5bdb7ead</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DepfileParser</name>
    <filename>structDepfileParser.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>Parse</name>
      <anchorfile>structDepfileParser.html</anchorfile>
      <anchor>ab00f64bc084aa068e5d03e13cf931ad7</anchor>
      <arglist>(string *content, string *err)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; StringPiece &gt;</type>
      <name>ins_</name>
      <anchorfile>structDepfileParser.html</anchorfile>
      <anchor>af75600dcb6788f6a9f01bc515681ca00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StringPiece</type>
      <name>out_</name>
      <anchorfile>structDepfileParser.html</anchorfile>
      <anchor>a7daf65c4239b0a261ec0df62c4d704f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DepfileParserTest</name>
    <filename>structDepfileParserTest.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>Parse</name>
      <anchorfile>structDepfileParserTest.html</anchorfile>
      <anchor>a3072d1cf80fdd313e15a144ca9fe4de6</anchor>
      <arglist>(const char *input, string *err)</arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>input_</name>
      <anchorfile>structDepfileParserTest.html</anchorfile>
      <anchor>a8cfb83c326c435b344678507700bbb6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DepfileParser</type>
      <name>parser_</name>
      <anchorfile>structDepfileParserTest.html</anchorfile>
      <anchor>a9c943af744c5afe4723535a999e3b83a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DepsLog</name>
    <filename>structDepsLog.html</filename>
    <class kind="struct">DepsLog::Deps</class>
    <member kind="function">
      <type>void</type>
      <name>Close</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>a750f013ae662f96e7f2545d213c7f3a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; Deps * &gt; &amp;</type>
      <name>deps</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>a849f7a1be3a785babb0089e1466fe874</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DepsLog</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>a1cb2e94499fbc1a4e3cdc8835c5d2fbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Deps *</type>
      <name>GetDeps</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>a075043796f88d312004cf5ae74a53c4e</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDepsEntryLiveFor</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>a3d91b6caef537ba9d9b50ecbf09cd4a5</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Load</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>a698004cf8030703ddf6b19f8ab7bd50e</anchor>
      <arglist>(const string &amp;path, State *state, string *err)</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; Node * &gt; &amp;</type>
      <name>nodes</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>a94bb97eecb9d8293ef1c7f19f1a65f1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OpenForWrite</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>af49ad152c2917c7e86742ce335db0263</anchor>
      <arglist>(const string &amp;path, string *err)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Recompact</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>a09515578bf5a271a93919c7ff2036001</anchor>
      <arglist>(const string &amp;path, string *err)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RecordDeps</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>a970cd6713ab54b3fff2f9de5255352fc</anchor>
      <arglist>(Node *node, TimeStamp mtime, const vector&lt; Node * &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RecordDeps</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>a5f48df80478fb9af806aa7c56946ca81</anchor>
      <arglist>(Node *node, TimeStamp mtime, int node_count, Node **nodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DepsLog</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>a5d1a8f67e5a655323ae73d140376cd71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>RecordId</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>aa4cc04faa7d2d9256a372f1b067e61ef</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>UpdateDeps</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>a35ce8189fffae2b7300d415ce115a0a3</anchor>
      <arglist>(int out_id, Deps *deps)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; Deps * &gt;</type>
      <name>deps_</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>af599cdffb987059f53caf7ebc63e41dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FILE *</type>
      <name>file_</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>a95b019cbbc01f5869c86bc790424d834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>needs_recompaction_</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>adee980c7d35e5c4b32b669733b4382c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; Node * &gt;</type>
      <name>nodes_</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>a6808f42a3e9b5e1a4f0a0664dcebaae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>DepsLogTest</name>
      <anchorfile>structDepsLog.html</anchorfile>
      <anchor>a5aac22285c95db2a3021f748c8aec5b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DepsLog::Deps</name>
    <filename>structDepsLog_1_1Deps.html</filename>
    <member kind="function">
      <type></type>
      <name>Deps</name>
      <anchorfile>structDepsLog_1_1Deps.html</anchorfile>
      <anchor>a74141ef75426e2fe7b221a292353e543</anchor>
      <arglist>(int mtime, int node_count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Deps</name>
      <anchorfile>structDepsLog_1_1Deps.html</anchorfile>
      <anchor>a6c88d181cc01233639159166687095c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mtime</name>
      <anchorfile>structDepsLog_1_1Deps.html</anchorfile>
      <anchor>ae73ed4a9faede3332a47215b2a68a5dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>node_count</name>
      <anchorfile>structDepsLog_1_1Deps.html</anchorfile>
      <anchor>af59c987b02350a4dfcd24a5406624fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Node **</type>
      <name>nodes</name>
      <anchorfile>structDepsLog_1_1Deps.html</anchorfile>
      <anchor>ab60b40fc0217ea187cdc60fb59ea27e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DiskInterface</name>
    <filename>structDiskInterface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>MakeDir</name>
      <anchorfile>structDiskInterface.html</anchorfile>
      <anchor>abf89f5cfce3c775997e7b40607107779</anchor>
      <arglist>(const string &amp;path)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeDirs</name>
      <anchorfile>structDiskInterface.html</anchorfile>
      <anchor>a7fae01dae68b95facad54b0bc233d279</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual string</type>
      <name>ReadFile</name>
      <anchorfile>structDiskInterface.html</anchorfile>
      <anchor>aed889f19b478039bd8d315fe965440ea</anchor>
      <arglist>(const string &amp;path, string *err)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>RemoveFile</name>
      <anchorfile>structDiskInterface.html</anchorfile>
      <anchor>ad7442b7e0b10e0737c56667d967e9f76</anchor>
      <arglist>(const string &amp;path)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TimeStamp</type>
      <name>Stat</name>
      <anchorfile>structDiskInterface.html</anchorfile>
      <anchor>a1095cf31175f95f005fc38b28683b0cb</anchor>
      <arglist>(const string &amp;path) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>WriteFile</name>
      <anchorfile>structDiskInterface.html</anchorfile>
      <anchor>afcfaed359bb8ba121bba9838c02c2483</anchor>
      <arglist>(const string &amp;path, const string &amp;contents)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiskInterface</name>
      <anchorfile>structDiskInterface.html</anchorfile>
      <anchor>a34d62e4d1ba8b716696bcfc6f2643cd3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Edge</name>
    <filename>structEdge.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>AllInputsReady</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>aefd8796e5feb48b153903895df709e43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>af904164977728b874359e3c07319be47</anchor>
      <arglist>(const char *prefix=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Edge</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>a3106b11d60125009dbf7a738ce540fdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>EvaluateCommand</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>ac4086e06c9982fbebdb9b1a5d52af3cd</anchor>
      <arglist>(bool incl_rsp_file=false)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>GetBinding</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>a4f495554a299524a951620f7b643d111</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetBindingBool</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>a23eef03702ce52f7fdf80a8e05e242d1</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>GetUnescapedDepfile</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>a327ebbb178acb1d05c454c806ba84c46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>GetUnescapedRspfile</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>a70c8d93441468aa04296c29ff94cbcb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_implicit</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>a90a2a3bc6234204d2285e46d80a822f9</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_order_only</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>a580887ea1830429a328f35a91c1da99a</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_phony</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>aaf7a366d8ba8f127da58839af826d548</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>outputs_ready</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>a2fe2114ba09e80a6a227eb04f8a404de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pool *</type>
      <name>pool</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>a1557cf70503cf69a91b20ea9351e58d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Rule &amp;</type>
      <name>rule</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>a3a65de0e14a559db9ebc0e60faa7d664</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_console</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>ade0ceb00f2eb88e99c7bcae5a07d37a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>weight</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>ab08abe6de206325f0b1f472cbadaa755</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>deps_missing_</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>acccfa23f518b63f8663f61a738bf121b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BindingEnv *</type>
      <name>env_</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>ac45836f73bc104304aad19e16cb7aa1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>implicit_deps_</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>a4dcd12be59a0653c7beef3c37edcf4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Node * &gt;</type>
      <name>inputs_</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>a4fd6b2daa2559765aaf2fed1de96f345</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>order_only_deps_</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>a7adc7b047f6574167758c27d87d9b5f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Node * &gt;</type>
      <name>outputs_</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>ac4ab5a6898d716f32683b63fafc65bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>outputs_ready_</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>affddbfc0888b9af3c8b65449f9e54852</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Pool *</type>
      <name>pool_</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>a8d44bdcbfb086a1771d6e13f256620a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Rule *</type>
      <name>rule_</name>
      <anchorfile>structEdge.html</anchorfile>
      <anchor>a6553b57e59b77a3f8a4bf9b19c25d7f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>EdgeEnv</name>
    <filename>structEdgeEnv.html</filename>
    <base>Env</base>
    <member kind="enumeration">
      <name>EscapeKind</name>
      <anchorfile>structEdgeEnv.html</anchorfile>
      <anchor>af5aeedc89db8f0cdbb072b104c7ba2ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kShellEscape</name>
      <anchorfile>structEdgeEnv.html</anchorfile>
      <anchor>af5aeedc89db8f0cdbb072b104c7ba2efa735c02ecd79f01637c799a2973634f72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kDoNotEscape</name>
      <anchorfile>structEdgeEnv.html</anchorfile>
      <anchor>af5aeedc89db8f0cdbb072b104c7ba2efaa804a2af5f66c80476dadcd6d0237530</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeEnv</name>
      <anchorfile>structEdgeEnv.html</anchorfile>
      <anchor>ad4b9ab32700e9681ee16b1ca32de5993</anchor>
      <arglist>(Edge *edge, EscapeKind escape)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>LookupVariable</name>
      <anchorfile>structEdgeEnv.html</anchorfile>
      <anchor>aa9c40e6440c932ac59bebefcd2e917bf</anchor>
      <arglist>(const string &amp;var)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>MakePathList</name>
      <anchorfile>structEdgeEnv.html</anchorfile>
      <anchor>a3611d2dee62a757d097245cc51eb6283</anchor>
      <arglist>(vector&lt; Node * &gt;::iterator begin, vector&lt; Node * &gt;::iterator end, char sep)</arglist>
    </member>
    <member kind="variable">
      <type>Edge *</type>
      <name>edge_</name>
      <anchorfile>structEdgeEnv.html</anchorfile>
      <anchor>a9cf14172d32813daa2e7e57e40230e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EscapeKind</type>
      <name>escape_in_out_</name>
      <anchorfile>structEdgeEnv.html</anchorfile>
      <anchor>ade0dae63fdec76a8d9d3040b99437c3e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Env</name>
    <filename>structEnv.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual string</type>
      <name>LookupVariable</name>
      <anchorfile>structEnv.html</anchorfile>
      <anchor>a985781a5c04cc4a34ac6e07c57e44768</anchor>
      <arglist>(const string &amp;var)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Env</name>
      <anchorfile>structEnv.html</anchorfile>
      <anchor>ab1a26ca6473b63e1ea70237a5c91c813</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>EvalString</name>
    <filename>structEvalString.html</filename>
    <member kind="function">
      <type>void</type>
      <name>AddSpecial</name>
      <anchorfile>structEvalString.html</anchorfile>
      <anchor>a803869729c8f3bcfbedf29b8c1fc5ebf</anchor>
      <arglist>(StringPiece text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddText</name>
      <anchorfile>structEvalString.html</anchorfile>
      <anchor>ade6ba336a1e0febe2dd8e4ebe8a94604</anchor>
      <arglist>(StringPiece text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>structEvalString.html</anchorfile>
      <anchor>a146124735105786a5065bd9fe85911f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>structEvalString.html</anchorfile>
      <anchor>a2379c3f1a055837f8c7b8083985626a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Evaluate</name>
      <anchorfile>structEvalString.html</anchorfile>
      <anchor>a6a8e12404fd1ee3f425992edf3876118</anchor>
      <arglist>(Env *env) const </arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Serialize</name>
      <anchorfile>structEvalString.html</anchorfile>
      <anchor>a856903e162935420a7d9f92f4b777cdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector&lt; pair&lt; string, TokenType &gt; &gt;</type>
      <name>TokenList</name>
      <anchorfile>structEvalString.html</anchorfile>
      <anchor>a624839e4086e9fd2867357ee439c0310</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TokenType</name>
      <anchorfile>structEvalString.html</anchorfile>
      <anchor>a751fb74ca53a79057d69b0dff4d64ab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RAW</name>
      <anchorfile>structEvalString.html</anchorfile>
      <anchor>a751fb74ca53a79057d69b0dff4d64ab8a5e036adce6899bc92dc78fa4cf7d7309</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPECIAL</name>
      <anchorfile>structEvalString.html</anchorfile>
      <anchor>a751fb74ca53a79057d69b0dff4d64ab8a7605297b1cf665d19e1d9c18db23e5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TokenList</type>
      <name>parsed_</name>
      <anchorfile>structEvalString.html</anchorfile>
      <anchor>addb087ce871bdfd4f6a130d14ece7604</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExternalStringHashMap</name>
    <filename>structExternalStringHashMap.html</filename>
    <templarg>V</templarg>
    <member kind="typedef">
      <type>hash_map&lt; StringPiece, V &gt;</type>
      <name>Type</name>
      <anchorfile>structExternalStringHashMap.html</anchorfile>
      <anchor>a7551393f72945d1df36ed914c9c6c682</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FakeCommandRunner</name>
    <filename>structFakeCommandRunner.html</filename>
    <base>CommandRunner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Abort</name>
      <anchorfile>structFakeCommandRunner.html</anchorfile>
      <anchor>a7dc048f943a2db989cb5fce98559e33b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRunMore</name>
      <anchorfile>structFakeCommandRunner.html</anchorfile>
      <anchor>a9555f4ea60223b6f93e6f93e095fbdc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FakeCommandRunner</name>
      <anchorfile>structFakeCommandRunner.html</anchorfile>
      <anchor>adf88b46f5512a027382b92c087f23204</anchor>
      <arglist>(VirtualFileSystem *fs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vector&lt; Edge * &gt;</type>
      <name>GetActiveEdges</name>
      <anchorfile>structFakeCommandRunner.html</anchorfile>
      <anchor>a3054b8e805b5ae5dfbb6f81e58096ac0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>StartCommand</name>
      <anchorfile>structFakeCommandRunner.html</anchorfile>
      <anchor>a8ae6f659f03fffead61e423aae0695cc</anchor>
      <arglist>(Edge *edge)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>WaitForCommand</name>
      <anchorfile>structFakeCommandRunner.html</anchorfile>
      <anchor>a2a79166f7cc6de259f21d555ac3c742c</anchor>
      <arglist>(Result *result)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>commands_ran_</name>
      <anchorfile>structFakeCommandRunner.html</anchorfile>
      <anchor>ac93b111db7e0b7e056bab35f7435244c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VirtualFileSystem *</type>
      <name>fs_</name>
      <anchorfile>structFakeCommandRunner.html</anchorfile>
      <anchor>ad384b3732a9750d7162639781a9678a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Edge *</type>
      <name>last_command_</name>
      <anchorfile>structFakeCommandRunner.html</anchorfile>
      <anchor>aceb2fb20d0b49ae8d0f437e021357104</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GETOPT_LONG_OPTION_T</name>
    <filename>structGETOPT__LONG__OPTION__T.html</filename>
    <member kind="variable">
      <type>int *</type>
      <name>flag</name>
      <anchorfile>structGETOPT__LONG__OPTION__T.html</anchorfile>
      <anchor>a9d4ff47718fe9bba8c44957fa450f4b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>has_arg</name>
      <anchorfile>structGETOPT__LONG__OPTION__T.html</anchorfile>
      <anchor>a7ae5706d2ff1233f4b77f44c2c9ec835</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structGETOPT__LONG__OPTION__T.html</anchorfile>
      <anchor>a0ac05c4f733caf07c92d70408d181e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>val</name>
      <anchorfile>structGETOPT__LONG__OPTION__T.html</anchorfile>
      <anchor>a0fa4f83e6a883e7acd8e6a373413ecf2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GraphTest</name>
    <filename>structGraphTest.html</filename>
    <base>StateTestWithBuiltinRules</base>
    <member kind="function">
      <type>void</type>
      <name>AddCatRule</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a42197db0a44e925718dda384627a030c</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>GetNode</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a73a86246aefb2b8aeed71ac6979f37f3</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphTest</name>
      <anchorfile>structGraphTest.html</anchorfile>
      <anchor>acdf7cac584bcdb565d54468fc032fa1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>VirtualFileSystem</type>
      <name>fs_</name>
      <anchorfile>structGraphTest.html</anchorfile>
      <anchor>a5288df1d31b827133b1a500b73d8d493</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DependencyScan</type>
      <name>scan_</name>
      <anchorfile>structGraphTest.html</anchorfile>
      <anchor>a858004b80d5401dba16553b4f561b678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state_</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a7fc39f179dd0a7d578690ce03ed58e87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GraphViz</name>
    <filename>structGraphViz.html</filename>
    <member kind="function">
      <type>void</type>
      <name>AddTarget</name>
      <anchorfile>structGraphViz.html</anchorfile>
      <anchor>a55ca0f366fbec5703e2e9e1609981a72</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Finish</name>
      <anchorfile>structGraphViz.html</anchorfile>
      <anchor>a2d788bf557363e0476d223cefdff38ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>structGraphViz.html</anchorfile>
      <anchor>a84ede9951cede05d6a708e062a29d3ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>set&lt; Edge * &gt;</type>
      <name>visited_edges_</name>
      <anchorfile>structGraphViz.html</anchorfile>
      <anchor>a43eadafb0ba0bfd1f91ba0a1c10c4032</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>set&lt; Node * &gt;</type>
      <name>visited_nodes_</name>
      <anchorfile>structGraphViz.html</anchorfile>
      <anchor>ac2c121f8164c0b690713661dd1e10b23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ImplicitDepLoader</name>
    <filename>structImplicitDepLoader.html</filename>
    <member kind="function">
      <type>DepsLog *</type>
      <name>deps_log</name>
      <anchorfile>structImplicitDepLoader.html</anchorfile>
      <anchor>a80b57e0a6da13369b1cbc83941e221a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitDepLoader</name>
      <anchorfile>structImplicitDepLoader.html</anchorfile>
      <anchor>a6a31a5bd83e08117a2fb3a43c88fc718</anchor>
      <arglist>(State *state, DepsLog *deps_log, DiskInterface *disk_interface)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LoadDeps</name>
      <anchorfile>structImplicitDepLoader.html</anchorfile>
      <anchor>a66cdcc2cfccfd7b86c851007bf3c1b13</anchor>
      <arglist>(Edge *edge, string *err)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>CreatePhonyInEdge</name>
      <anchorfile>structImplicitDepLoader.html</anchorfile>
      <anchor>a984e413304371e8239f252ada4574f7c</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>LoadDepFile</name>
      <anchorfile>structImplicitDepLoader.html</anchorfile>
      <anchor>a7173ceeb9b48be3ffd3527b2245abd7a</anchor>
      <arglist>(Edge *edge, const string &amp;path, string *err)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>LoadDepsFromLog</name>
      <anchorfile>structImplicitDepLoader.html</anchorfile>
      <anchor>a03bcc22d47ef3dc927f93a2bff86f895</anchor>
      <arglist>(Edge *edge, string *err)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>vector&lt; Node * &gt;::iterator</type>
      <name>PreallocateSpace</name>
      <anchorfile>structImplicitDepLoader.html</anchorfile>
      <anchor>a15ec46bda4de60afad2b751b1bc2012f</anchor>
      <arglist>(Edge *edge, int count)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DepsLog *</type>
      <name>deps_log_</name>
      <anchorfile>structImplicitDepLoader.html</anchorfile>
      <anchor>ab443a0081434600b2e72514210f0f568</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DiskInterface *</type>
      <name>disk_interface_</name>
      <anchorfile>structImplicitDepLoader.html</anchorfile>
      <anchor>ab70b785ccb07bc9694be0130263f7380</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>State *</type>
      <name>state_</name>
      <anchorfile>structImplicitDepLoader.html</anchorfile>
      <anchor>aaab15619cb43a09229bab3c9a58c6896</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IncludesNormalize</name>
    <filename>structIncludesNormalize.html</filename>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>AbsPath</name>
      <anchorfile>structIncludesNormalize.html</anchorfile>
      <anchor>a324a92d846f08239426297eb710ab6f5</anchor>
      <arglist>(StringPiece s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>Join</name>
      <anchorfile>structIncludesNormalize.html</anchorfile>
      <anchor>a089d15ee6d0e334141ceab320374e18f</anchor>
      <arglist>(const vector&lt; string &gt; &amp;list, char sep)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>Normalize</name>
      <anchorfile>structIncludesNormalize.html</anchorfile>
      <anchor>a8dafb93f3dbdf39aabe0a5fe5390604a</anchor>
      <arglist>(const string &amp;input, const char *relative_to)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>Relativize</name>
      <anchorfile>structIncludesNormalize.html</anchorfile>
      <anchor>ad9537ab3ef37127f1fbb95bcb8594f2e</anchor>
      <arglist>(StringPiece path, const string &amp;start)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vector&lt; string &gt;</type>
      <name>Split</name>
      <anchorfile>structIncludesNormalize.html</anchorfile>
      <anchor>a3f77f5097c5197b93242658364d0d229</anchor>
      <arglist>(const string &amp;input, char sep)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>ToLower</name>
      <anchorfile>structIncludesNormalize.html</anchorfile>
      <anchor>aeb82c00359415b8ad6d33056e10b9410</anchor>
      <arglist>(const string &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LaconicPrinter</name>
    <filename>structLaconicPrinter.html</filename>
    <member kind="function">
      <type></type>
      <name>LaconicPrinter</name>
      <anchorfile>structLaconicPrinter.html</anchorfile>
      <anchor>a28d58bd9a49dbbd0f231bb17bd85abcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>OnTestIterationStart</name>
      <anchorfile>structLaconicPrinter.html</anchorfile>
      <anchor>aa3fea120a0ca55d0f1c715f43f68acb1</anchor>
      <arglist>(const testing::UnitTest &amp;test_info, int iteration)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>OnTestPartResult</name>
      <anchorfile>structLaconicPrinter.html</anchorfile>
      <anchor>a52bcc0e1e3b76378e9602c6b028b6de5</anchor>
      <arglist>(const testing::TestPartResult &amp;test_part_result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>OnTestProgramEnd</name>
      <anchorfile>structLaconicPrinter.html</anchorfile>
      <anchor>abf74a48b6cc0aa194ead1970cde34bfb</anchor>
      <arglist>(const testing::UnitTest &amp;unit_test)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>OnTestProgramStart</name>
      <anchorfile>structLaconicPrinter.html</anchorfile>
      <anchor>a5fb8bbbefe3328463e984caf2bfc417d</anchor>
      <arglist>(const testing::UnitTest &amp;unit_test)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>OnTestStart</name>
      <anchorfile>structLaconicPrinter.html</anchorfile>
      <anchor>ac196bcbaf01abd5931cfc8e588dd3ad7</anchor>
      <arglist>(const testing::TestInfo &amp;test_info)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>iteration_</name>
      <anchorfile>structLaconicPrinter.html</anchorfile>
      <anchor>a6cd8589242373063a2014b08f2c91b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LinePrinter</type>
      <name>printer_</name>
      <anchorfile>structLaconicPrinter.html</anchorfile>
      <anchor>a72fd421f20715fe8de76d7635963793e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>test_count_</name>
      <anchorfile>structLaconicPrinter.html</anchorfile>
      <anchor>ae05d35e5e7ff1769f3c8b7e4cb0ebbd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>tests_started_</name>
      <anchorfile>structLaconicPrinter.html</anchorfile>
      <anchor>a0b3c6a927530c907ac9727d856c72d00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Lexer</name>
    <filename>structLexer.html</filename>
    <member kind="enumeration">
      <name>Token</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a1d27830295ba22502fc32203898f2f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERROR</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a1d27830295ba22502fc32203898f2f6ba8a85715cc193adb12a20f17830eeb862</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUILD</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a1d27830295ba22502fc32203898f2f6bac649032b113ef15dd7d2f0c225218691</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLON</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a1d27830295ba22502fc32203898f2f6ba18162d305e3eb713d1637d3e695f686f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEFAULT</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a1d27830295ba22502fc32203898f2f6ba6ce492211875696e83afe0353a6db89e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EQUALS</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a1d27830295ba22502fc32203898f2f6bab7a298188d1be82a4b4e076fe15c539c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDENT</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a1d27830295ba22502fc32203898f2f6bacc5f8b4097a4c31cefe542a4671aba57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INCLUDE</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a1d27830295ba22502fc32203898f2f6baa63f56a7bdc9999455c05619d775228f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INDENT</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a1d27830295ba22502fc32203898f2f6ba8965222c54df658e95974d2ca0c94698</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEWLINE</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a1d27830295ba22502fc32203898f2f6ba2a107138c47076a5528f93c581142fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PIPE</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a1d27830295ba22502fc32203898f2f6bab2a44e2a4808a7ca2f696c0b7881c166</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PIPE2</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a1d27830295ba22502fc32203898f2f6bad0ec76e4aa77326cc360ce2c41c15dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POOL</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a1d27830295ba22502fc32203898f2f6ba5b85093fcddb939101489ac3c0b6a994</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RULE</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a1d27830295ba22502fc32203898f2f6ba893eb5962da693a76e150e0045646444</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUBNINJA</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a1d27830295ba22502fc32203898f2f6bad40537058b10803a5ab8a7ff483f934f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TEOF</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a1d27830295ba22502fc32203898f2f6ba0491da9bf8bfecd97e3eefe38f7d8964</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>DescribeLastError</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a28816cbe23bb698e1015f2a5495cf119</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Error</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>ab26f01f469a8195ea553a6df50180c8d</anchor>
      <arglist>(const string &amp;message, string *err)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lexer</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a2752a2b16cc1ffbcb8fc3e82e95bf331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lexer</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a8e12946738ee015bac381da30e2b03b0</anchor>
      <arglist>(const char *input)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PeekToken</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a221a8e5ba1a80c71b857e5e1c5aa6101</anchor>
      <arglist>(Token token)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadIdent</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a21e07abf483e728363182ebed77b8f01</anchor>
      <arglist>(string *out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadPath</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>adf4cd5d2fb7e449b3e8027edd48e710d</anchor>
      <arglist>(EvalString *path, string *err)</arglist>
    </member>
    <member kind="function">
      <type>Token</type>
      <name>ReadToken</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>ac1cfe16a9d3c61feadadee2425818718</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadVarValue</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a4eaec0d1dc983ac4d0a6a2e2069cbe8a</anchor>
      <arglist>(EvalString *value, string *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>ab5f3e425e6e390fcfc41c522d965287d</anchor>
      <arglist>(StringPiece filename, StringPiece input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnreadToken</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a293810eab7cba536cb30188659db2131</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>TokenErrorHint</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>ac93fc3ad882cf738fa73ff195802f817</anchor>
      <arglist>(Token expected)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>TokenName</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a16a661190b2ed887c50f25b113129612</anchor>
      <arglist>(Token t)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>EatWhitespace</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>ad75dba40b58d623a6ce672db237dd5e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>ReadEvalString</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>abb87acd05cb083073fb31588e28a40a7</anchor>
      <arglist>(EvalString *eval, bool path, string *err)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>StringPiece</type>
      <name>filename_</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>ad5e021caf9fb7e3200365fb891dfafe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>StringPiece</type>
      <name>input_</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>ae8a8a533402324ed68e4528ade31a158</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>last_token_</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>ab13c06b9680f581c52812959bc3daa9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>ofs_</name>
      <anchorfile>structLexer.html</anchorfile>
      <anchor>a28b253553702cbc4709179b7e9354697</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LinePrinter</name>
    <filename>structLinePrinter.html</filename>
    <member kind="enumeration">
      <name>LineType</name>
      <anchorfile>structLinePrinter.html</anchorfile>
      <anchor>a99f22ad59aa1bca1165da568c97c3d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FULL</name>
      <anchorfile>structLinePrinter.html</anchorfile>
      <anchor>a99f22ad59aa1bca1165da568c97c3d58a69f1d61dcaed878855e76c5435c807e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ELIDE</name>
      <anchorfile>structLinePrinter.html</anchorfile>
      <anchor>a99f22ad59aa1bca1165da568c97c3d58abf44d7c12a55615f6b9c93cb937befcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_smart_terminal</name>
      <anchorfile>structLinePrinter.html</anchorfile>
      <anchor>a855c07411fbfe1a25006099a201422b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinePrinter</name>
      <anchorfile>structLinePrinter.html</anchorfile>
      <anchor>a0424b5f6191eb3514f6365a70f8a103c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>structLinePrinter.html</anchorfile>
      <anchor>aa9f64b574d547d32748d2517e21beea5</anchor>
      <arglist>(string to_print, LineType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintOnNewLine</name>
      <anchorfile>structLinePrinter.html</anchorfile>
      <anchor>a5c7e10eb69b0f8b39fe4ba92079e72f6</anchor>
      <arglist>(const string &amp;to_print)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_smart_terminal</name>
      <anchorfile>structLinePrinter.html</anchorfile>
      <anchor>a0992dd6ef3dbe9aab0595ea98bcd15e5</anchor>
      <arglist>(bool smart)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetConsoleLocked</name>
      <anchorfile>structLinePrinter.html</anchorfile>
      <anchor>a38acb5f22d9a84a0a86da6e0ba861a35</anchor>
      <arglist>(bool locked)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>PrintOrBuffer</name>
      <anchorfile>structLinePrinter.html</anchorfile>
      <anchor>a05f503456976587d2f243521966d5dfc</anchor>
      <arglist>(const char *data, size_t size)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>console_locked_</name>
      <anchorfile>structLinePrinter.html</anchorfile>
      <anchor>a2a63e7af653f2d4f0cbea8ffa1e88235</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>have_blank_line_</name>
      <anchorfile>structLinePrinter.html</anchorfile>
      <anchor>a2e0a97433a4555e10e8d93c3ae2ea1d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>line_buffer_</name>
      <anchorfile>structLinePrinter.html</anchorfile>
      <anchor>a015279ac89a05545ff5ac1fc1e002b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LineType</type>
      <name>line_type_</name>
      <anchorfile>structLinePrinter.html</anchorfile>
      <anchor>ad362b4a3f321c2dd39bc1f356fc65dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>output_buffer_</name>
      <anchorfile>structLinePrinter.html</anchorfile>
      <anchor>acade00d205f0cabdaa35ae43eee44486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>smart_terminal_</name>
      <anchorfile>structLinePrinter.html</anchorfile>
      <anchor>a0e2c3f54e0f44153ceef6d5d93a9d22f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LineReader</name>
    <filename>structLineReader.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>ReadLine</name>
      <anchorfile>structLineReader.html</anchorfile>
      <anchor>a25744930e7464b9783efaaaf51b27164</anchor>
      <arglist>(char **line_start, char **line_end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type></type>
      <name>LineReader</name>
      <anchorfile>structLineReader.html</anchorfile>
      <anchor>a74edfd48156e27b1e66da4b2a8e8c96b</anchor>
      <arglist>(FILE *file)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>buf_</name>
      <anchorfile>structLineReader.html</anchorfile>
      <anchor>a27421ae2a1c647d762056098d140df7a</anchor>
      <arglist>[256&lt;&lt; 10]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>buf_end_</name>
      <anchorfile>structLineReader.html</anchorfile>
      <anchor>ac2dd9e02211f3b92ce88d0671b9ec451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FILE *</type>
      <name>file_</name>
      <anchorfile>structLineReader.html</anchorfile>
      <anchor>a908c11c1d7f802f7348ae0a1f6790234</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>line_end_</name>
      <anchorfile>structLineReader.html</anchorfile>
      <anchor>a809b226aacf2ed0d7aaeca6d0ae2bd4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>line_start_</name>
      <anchorfile>structLineReader.html</anchorfile>
      <anchor>a36a8e5157977201734978cef8eff14dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ManifestParser</name>
    <filename>structManifestParser.html</filename>
    <class kind="struct">ManifestParser::FileReader</class>
    <member kind="function">
      <type>bool</type>
      <name>Load</name>
      <anchorfile>structManifestParser.html</anchorfile>
      <anchor>a35a83550c50666738a8984a5f00308be</anchor>
      <arglist>(const string &amp;filename, string *err, Lexer *parent=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ManifestParser</name>
      <anchorfile>structManifestParser.html</anchorfile>
      <anchor>ac5d014b015600d5b88f0ab55b0b5c750</anchor>
      <arglist>(State *state, FileReader *file_reader)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ParseTest</name>
      <anchorfile>structManifestParser.html</anchorfile>
      <anchor>acf584c7557f4ecbf35f65484db87d7c4</anchor>
      <arglist>(const string &amp;input, string *err)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>ExpectToken</name>
      <anchorfile>structManifestParser.html</anchorfile>
      <anchor>a47bb8051c40f9faa1aaa9efac96a1aaf</anchor>
      <arglist>(Lexer::Token expected, string *err)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>Parse</name>
      <anchorfile>structManifestParser.html</anchorfile>
      <anchor>aad6b425073d209a4f4fadd009920cb0e</anchor>
      <arglist>(const string &amp;filename, const string &amp;input, string *err)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>ParseDefault</name>
      <anchorfile>structManifestParser.html</anchorfile>
      <anchor>a2264edd752bc1d2fb2c0aaf272cb0a65</anchor>
      <arglist>(string *err)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>ParseEdge</name>
      <anchorfile>structManifestParser.html</anchorfile>
      <anchor>a70208843bcad06d5796b98ba7d24ec35</anchor>
      <arglist>(string *err)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>ParseFileInclude</name>
      <anchorfile>structManifestParser.html</anchorfile>
      <anchor>a2f07fb296ccd47ccc56a7abdaa011f80</anchor>
      <arglist>(bool new_scope, string *err)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>ParseLet</name>
      <anchorfile>structManifestParser.html</anchorfile>
      <anchor>a1f9dffe49fc2952d99355b22d4442c05</anchor>
      <arglist>(string *key, EvalString *val, string *err)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>ParsePool</name>
      <anchorfile>structManifestParser.html</anchorfile>
      <anchor>a8bf152be7e6880b4e419187fed3d0d0f</anchor>
      <arglist>(string *err)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>ParseRule</name>
      <anchorfile>structManifestParser.html</anchorfile>
      <anchor>ad8e59ed84a6c318e2169ae6c52b96379</anchor>
      <arglist>(string *err)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BindingEnv *</type>
      <name>env_</name>
      <anchorfile>structManifestParser.html</anchorfile>
      <anchor>a0dbb40eddd53ef84a018cb2de667fcb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FileReader *</type>
      <name>file_reader_</name>
      <anchorfile>structManifestParser.html</anchorfile>
      <anchor>a2b634534e045a7e2b1576cbd70e9dc9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Lexer</type>
      <name>lexer_</name>
      <anchorfile>structManifestParser.html</anchorfile>
      <anchor>a07bee06cdcecc02029c51fc86b51a141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>State *</type>
      <name>state_</name>
      <anchorfile>structManifestParser.html</anchorfile>
      <anchor>ad7b8cc26b5900c465a38106f8d92bbe0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ManifestParser::FileReader</name>
    <filename>structManifestParser_1_1FileReader.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>ReadFile</name>
      <anchorfile>structManifestParser_1_1FileReader.html</anchorfile>
      <anchor>a2189a2031f8731473f1c4979c5b4fda5</anchor>
      <arglist>(const string &amp;path, string *content, string *err)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileReader</name>
      <anchorfile>structManifestParser_1_1FileReader.html</anchorfile>
      <anchor>acfb2eeb2ec40be2ab44c0c104c0ef256</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Metric</name>
    <filename>structMetric.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>count</name>
      <anchorfile>structMetric.html</anchorfile>
      <anchor>a7f9387bafc99d555d79cfc7954f989cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>name</name>
      <anchorfile>structMetric.html</anchorfile>
      <anchor>acc2b63e58486a2cf15079509280d2a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>sum</name>
      <anchorfile>structMetric.html</anchorfile>
      <anchor>abad9f6bdd54bf6aada3cd4648a3e62eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Metrics</name>
    <filename>structMetrics.html</filename>
    <member kind="function">
      <type>Metric *</type>
      <name>NewMetric</name>
      <anchorfile>structMetrics.html</anchorfile>
      <anchor>a4e4606421ee8988252a72614a9aaccc4</anchor>
      <arglist>(const string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Report</name>
      <anchorfile>structMetrics.html</anchorfile>
      <anchor>af32f2c06d28ec9074cd42e30739f8f5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; Metric * &gt;</type>
      <name>metrics_</name>
      <anchorfile>structMetrics.html</anchorfile>
      <anchor>a14335872c05ae38c8b94c556f44f8efb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Node</name>
    <filename>structNode.html</filename>
    <member kind="function">
      <type>void</type>
      <name>AddOutEdge</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>a6c9ffc806f7528ad52fbb074def272d2</anchor>
      <arglist>(Edge *edge)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>a6e873ee67eebc1de8a67555cb649932b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>a4c8556362cc4adfdfe7922c085307e27</anchor>
      <arglist>(const char *prefix=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>a1f440691156a6bd0771f9e2226075fcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>a703c4c528d8b5176ee7a85db7cdd4208</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Edge *</type>
      <name>in_edge</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>a450d70a4a4742d1b72c861eb67da4201</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MarkDirty</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>aa50b08f6df60314fcb20514b6967676f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MarkMissing</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>ab7ca4157d81a433cefdae69913e0fc3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TimeStamp</type>
      <name>mtime</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>ad338fa15807fdb8f2662e1c3fceb18ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>a158db30e19d585491f02163de57826de</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; Edge * &gt; &amp;</type>
      <name>out_edges</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>ab23ddc9378428fba75fbc265f9555d82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>path</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>a8530ccbc220a8fe1d50256c7ef4ee6d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetState</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>a9871b133143f929e71e1d50f88cfda8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dirty</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>a08cf000f519bb3111eafd7dcc34ba9cd</anchor>
      <arglist>(bool dirty)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_id</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>a1eba2a5f320852762c2f92c18560c809</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_in_edge</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>a0f7fe3f8e4be0a990fdc2648d7020abe</anchor>
      <arglist>(Edge *edge)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Stat</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>a86d655a6441a755a3d13348029db3885</anchor>
      <arglist>(DiskInterface *disk_interface)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>StatIfNecessary</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>aeb163805e19ab33c949edb8029e2ae7f</anchor>
      <arglist>(DiskInterface *disk_interface)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>status_known</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>a5ac94179891e330eb9ed8c32e58afe4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>dirty_</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>acaef6422e9a4543ab3100bfc48692633</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>id_</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>af5fe3721343d6edbaacbbc19935ba19d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Edge *</type>
      <name>in_edge_</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>accd8ebf1e30b9624dc4566183207c8a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TimeStamp</type>
      <name>mtime_</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>a2d5c6b4335bf522f94dd5a4450bb22b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; Edge * &gt;</type>
      <name>out_edges_</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>ad3170a7fe2a24ccc2240d0e64cb179b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>path_</name>
      <anchorfile>structNode.html</anchorfile>
      <anchor>a8f27a68eb51e5d750e8648b477f15acb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NoDeadPaths</name>
    <filename>structNoDeadPaths.html</filename>
    <base>BuildLogUser</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsPathDead</name>
      <anchorfile>structNoDeadPaths.html</anchorfile>
      <anchor>a8d4da134866bd2e4393bcc2c6e35faaa</anchor>
      <arglist>(StringPiece) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ParserTest</name>
    <filename>structParserTest.html</filename>
    <base>ManifestParser::FileReader</base>
    <member kind="function">
      <type>void</type>
      <name>AssertParse</name>
      <anchorfile>structParserTest.html</anchorfile>
      <anchor>af21898f5fe97c7a919b4357f837a9cf8</anchor>
      <arglist>(const char *input)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ReadFile</name>
      <anchorfile>structParserTest.html</anchorfile>
      <anchor>a6a64ee37b845bb764e1c92e32fcc5184</anchor>
      <arglist>(const string &amp;path, string *content, string *err)</arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, string &gt;</type>
      <name>files_</name>
      <anchorfile>structParserTest.html</anchorfile>
      <anchor>a497ef39fb6ad3957e2bd1d7819f96d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>files_read_</name>
      <anchorfile>structParserTest.html</anchorfile>
      <anchor>a40b41aa069fb3495f4e45f583f312216</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state</name>
      <anchorfile>structParserTest.html</anchorfile>
      <anchor>a5246c88c6d1a741357a026b9e0bb6b17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Plan</name>
    <filename>structPlan.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>AddTarget</name>
      <anchorfile>structPlan.html</anchorfile>
      <anchor>ace573e539c7ddf7192b27c045bfda819</anchor>
      <arglist>(Node *node, string *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CleanNode</name>
      <anchorfile>structPlan.html</anchorfile>
      <anchor>a06b740a7ea6111b8726ff8d46d719fe9</anchor>
      <arglist>(DependencyScan *scan, Node *node)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>command_edge_count</name>
      <anchorfile>structPlan.html</anchorfile>
      <anchor>a2c28ad28e9516290e567f8caede3aafa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>structPlan.html</anchorfile>
      <anchor>a24ea67df1e2e46b2c1fa128fdb528a42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EdgeFinished</name>
      <anchorfile>structPlan.html</anchorfile>
      <anchor>a97410a76f87c87484ea3353c390f9885</anchor>
      <arglist>(Edge *edge)</arglist>
    </member>
    <member kind="function">
      <type>Edge *</type>
      <name>FindWork</name>
      <anchorfile>structPlan.html</anchorfile>
      <anchor>ade35148e31da830a66fd5a852f8901e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>more_to_do</name>
      <anchorfile>structPlan.html</anchorfile>
      <anchor>a41faf1d55334495c5443cdf0eb2c2ca4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plan</name>
      <anchorfile>structPlan.html</anchorfile>
      <anchor>a031ab495af5a99a883be2e09860086f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>AddSubTarget</name>
      <anchorfile>structPlan.html</anchorfile>
      <anchor>af4200052aecbdaa7a31bb267cee4b4ff</anchor>
      <arglist>(Node *node, vector&lt; Node * &gt; *stack, string *err)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>CheckDependencyCycle</name>
      <anchorfile>structPlan.html</anchorfile>
      <anchor>a7f6a2f59db582b6f228de8ab471e872f</anchor>
      <arglist>(Node *node, vector&lt; Node * &gt; *stack, string *err)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>NodeFinished</name>
      <anchorfile>structPlan.html</anchorfile>
      <anchor>aee4e9368a64b819b3fe2563551e8ef65</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ResumeDelayedJobs</name>
      <anchorfile>structPlan.html</anchorfile>
      <anchor>ac9b48c30d648d98c84c816137daa11d9</anchor>
      <arglist>(Edge *edge)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ScheduleWork</name>
      <anchorfile>structPlan.html</anchorfile>
      <anchor>a0f2d5248f053012f5cb456a339652a0f</anchor>
      <arglist>(Edge *edge)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>command_edges_</name>
      <anchorfile>structPlan.html</anchorfile>
      <anchor>a1c4331037018442e30c9269aebcd385a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>set&lt; Edge * &gt;</type>
      <name>ready_</name>
      <anchorfile>structPlan.html</anchorfile>
      <anchor>ac228b4a3b36ff0fc8a2fcfa698ebfe5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; Edge *, bool &gt;</type>
      <name>want_</name>
      <anchorfile>structPlan.html</anchorfile>
      <anchor>a2615745b23f7548943565d31d0e62ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>wanted_edges_</name>
      <anchorfile>structPlan.html</anchorfile>
      <anchor>a6cddf393d7f7adb5827e006fa4f26314</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PlanTest</name>
    <filename>structPlanTest.html</filename>
    <base>StateTestWithBuiltinRules</base>
    <member kind="function">
      <type>void</type>
      <name>AddCatRule</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a42197db0a44e925718dda384627a030c</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FindWorkSorted</name>
      <anchorfile>structPlanTest.html</anchorfile>
      <anchor>ae54b1b196ddacd09895b79fb8cea88bb</anchor>
      <arglist>(deque&lt; Edge * &gt; *ret, int count)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>GetNode</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a73a86246aefb2b8aeed71ac6979f37f3</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TestPoolWithDepthOne</name>
      <anchorfile>structPlanTest.html</anchorfile>
      <anchor>a4f869c9bc4ec3cf7e873df25a1e38704</anchor>
      <arglist>(const char *test_case)</arglist>
    </member>
    <member kind="variable">
      <type>Plan</type>
      <name>plan_</name>
      <anchorfile>structPlanTest.html</anchorfile>
      <anchor>a4c01ff074b43aa178f4af994da7f7ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state_</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a7fc39f179dd0a7d578690ce03ed58e87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Pool</name>
    <filename>structPool.html</filename>
    <member kind="function">
      <type>void</type>
      <name>DelayEdge</name>
      <anchorfile>structPool.html</anchorfile>
      <anchor>a3c88e6b4b540a6fbfbb24cc556f04db9</anchor>
      <arglist>(Edge *edge)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>depth</name>
      <anchorfile>structPool.html</anchorfile>
      <anchor>a47b69680f27ced011b0dfadccfdd048b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>structPool.html</anchorfile>
      <anchor>a3449f3f2cd0427dff2a0de674765c58f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EdgeFinished</name>
      <anchorfile>structPool.html</anchorfile>
      <anchor>ae352d910dce1fa4c94529944c7495a08</anchor>
      <arglist>(const Edge &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EdgeScheduled</name>
      <anchorfile>structPool.html</anchorfile>
      <anchor>a96f5801bb14f886abb3e79370af35df6</anchor>
      <arglist>(const Edge &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid</name>
      <anchorfile>structPool.html</anchorfile>
      <anchor>a04ffb36bfdf1141a5fd7dc17885d8bc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>name</name>
      <anchorfile>structPool.html</anchorfile>
      <anchor>a7565d8cb32bd057ebc4df40db1a1db75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pool</name>
      <anchorfile>structPool.html</anchorfile>
      <anchor>aaacff8b7eb6af91dcb63cfa8b6866306</anchor>
      <arglist>(const string &amp;name, int depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RetrieveReadyEdges</name>
      <anchorfile>structPool.html</anchorfile>
      <anchor>a31138a0de1bc04257ca85917a8b1a552</anchor>
      <arglist>(set&lt; Edge * &gt; *ready_queue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldDelayEdge</name>
      <anchorfile>structPool.html</anchorfile>
      <anchor>a452153b4aa28c88b39fa18f8f8c128d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>set&lt; Edge *, bool(*)(const Edge *, const Edge *)</type>
      <name>DelayedEdges</name>
      <anchorfile>structPool.html</anchorfile>
      <anchor>a7184759cc3a824881991a48e657c02e2</anchor>
      <arglist>)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static bool</type>
      <name>WeightedEdgeCmp</name>
      <anchorfile>structPool.html</anchorfile>
      <anchor>a1acaec03b178fa047a226d262e9fc430</anchor>
      <arglist>(const Edge *a, const Edge *b)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>current_use_</name>
      <anchorfile>structPool.html</anchorfile>
      <anchor>afae30adbf4498e118e4c39cdc7e11dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DelayedEdges</type>
      <name>delayed_</name>
      <anchorfile>structPool.html</anchorfile>
      <anchor>a21f4ac3bfa9871c9f67a20176f4dfb75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>depth_</name>
      <anchorfile>structPool.html</anchorfile>
      <anchor>a0c90fac0d3f353e213ceefdcc1bcc1d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>name_</name>
      <anchorfile>structPool.html</anchorfile>
      <anchor>aafd7127dbe9ed72232d7f520e4f621b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RealCommandRunner</name>
    <filename>structRealCommandRunner.html</filename>
    <base>CommandRunner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Abort</name>
      <anchorfile>structRealCommandRunner.html</anchorfile>
      <anchor>ab9844565170ccee77ef0b32d50866b6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRunMore</name>
      <anchorfile>structRealCommandRunner.html</anchorfile>
      <anchor>a20c78ac0596d252fd92fc0697826f7f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vector&lt; Edge * &gt;</type>
      <name>GetActiveEdges</name>
      <anchorfile>structRealCommandRunner.html</anchorfile>
      <anchor>a3bc80344ec4558862978027c6deec27b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealCommandRunner</name>
      <anchorfile>structRealCommandRunner.html</anchorfile>
      <anchor>ad7815c6e2b47ff6903b3a752dd532bb9</anchor>
      <arglist>(const BuildConfig &amp;config)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>StartCommand</name>
      <anchorfile>structRealCommandRunner.html</anchorfile>
      <anchor>a314f3738437eb416004396ac267de515</anchor>
      <arglist>(Edge *edge)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>WaitForCommand</name>
      <anchorfile>structRealCommandRunner.html</anchorfile>
      <anchor>a8c3001e6780c9dfc9f444205c8f6f55b</anchor>
      <arglist>(Result *result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RealCommandRunner</name>
      <anchorfile>structRealCommandRunner.html</anchorfile>
      <anchor>a971f6ea0ec1df05e734c9aba16be6997</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const BuildConfig &amp;</type>
      <name>config_</name>
      <anchorfile>structRealCommandRunner.html</anchorfile>
      <anchor>aeece9d778b4cd826f377f33e9c25f53f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; Subprocess *, Edge * &gt;</type>
      <name>subproc_to_edge_</name>
      <anchorfile>structRealCommandRunner.html</anchorfile>
      <anchor>a49f2391d5b878b7b2a9c97f5c7f3571a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SubprocessSet</type>
      <name>subprocs_</name>
      <anchorfile>structRealCommandRunner.html</anchorfile>
      <anchor>a36b41da74ab4d353172f228f72f67e14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RealDiskInterface</name>
    <filename>structRealDiskInterface.html</filename>
    <base>DiskInterface</base>
    <member kind="function">
      <type>void</type>
      <name>AllowStatCache</name>
      <anchorfile>structRealDiskInterface.html</anchorfile>
      <anchor>a5d65ad648f4104dc051b7968409722a1</anchor>
      <arglist>(bool allow)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>MakeDir</name>
      <anchorfile>structRealDiskInterface.html</anchorfile>
      <anchor>acf868fd64fcb5dff9cc9741bd2e5575e</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeDirs</name>
      <anchorfile>structDiskInterface.html</anchorfile>
      <anchor>a7fae01dae68b95facad54b0bc233d279</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>ReadFile</name>
      <anchorfile>structRealDiskInterface.html</anchorfile>
      <anchor>aca5e97e18e89f64a56fc2388d3aad69b</anchor>
      <arglist>(const string &amp;path, string *err)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealDiskInterface</name>
      <anchorfile>structRealDiskInterface.html</anchorfile>
      <anchor>ac1b01e685fc9981d391c3be3d9a30894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>RemoveFile</name>
      <anchorfile>structRealDiskInterface.html</anchorfile>
      <anchor>a95db458a6793ec41ae8727c76d11475a</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TimeStamp</type>
      <name>Stat</name>
      <anchorfile>structRealDiskInterface.html</anchorfile>
      <anchor>af9a98eca935f55943728ecf3d4447c72</anchor>
      <arglist>(const string &amp;path) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>WriteFile</name>
      <anchorfile>structRealDiskInterface.html</anchorfile>
      <anchor>a0bd82c99c8838d65ae6ab1c0bbf94fe9</anchor>
      <arglist>(const string &amp;path, const string &amp;contents)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RealDiskInterface</name>
      <anchorfile>structRealDiskInterface.html</anchorfile>
      <anchor>a9f702e2142f8227cc6cfdb682208bd85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>quiet_</name>
      <anchorfile>structRealDiskInterface.html</anchorfile>
      <anchor>a9b7e7955cfaed1b9591892464b77876b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RealFileReader</name>
    <filename>structRealFileReader.html</filename>
    <base>ManifestParser::FileReader</base>
    <base>ManifestParser::FileReader</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ReadFile</name>
      <anchorfile>structRealFileReader.html</anchorfile>
      <anchor>adade798308a0ebcd2ac8849d1cbf1929</anchor>
      <arglist>(const string &amp;path, string *content, string *err)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Rule</name>
    <filename>structRule.html</filename>
    <member kind="typedef">
      <type>map&lt; string, EvalString &gt;</type>
      <name>Bindings</name>
      <anchorfile>structRule.html</anchorfile>
      <anchor>a73a4f500987750ba7cd2245d2d9cd2eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddBinding</name>
      <anchorfile>structRule.html</anchorfile>
      <anchor>ac29153c03ebf416971d2eb13f9f3f272</anchor>
      <arglist>(const string &amp;key, const EvalString &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>const EvalString *</type>
      <name>GetBinding</name>
      <anchorfile>structRule.html</anchorfile>
      <anchor>afa57841cd156c7a449f89acb2c4faeb8</anchor>
      <arglist>(const string &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>name</name>
      <anchorfile>structRule.html</anchorfile>
      <anchor>a5f4c5466903b736836e62b105b03cb87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rule</name>
      <anchorfile>structRule.html</anchorfile>
      <anchor>a74a199eb08996f8d7a1f9b976824e0c2</anchor>
      <arglist>(const string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsReservedBinding</name>
      <anchorfile>structRule.html</anchorfile>
      <anchor>a32ea121b2c519390ba34854f2398c4f0</anchor>
      <arglist>(const string &amp;var)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, EvalString &gt;</type>
      <name>bindings_</name>
      <anchorfile>structRule.html</anchorfile>
      <anchor>a68a2ec910a6aee8c0f89d1e2502dae7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>name_</name>
      <anchorfile>structRule.html</anchorfile>
      <anchor>ab78c8a835c42cf88c8344d9134432b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>ManifestParser</name>
      <anchorfile>structRule.html</anchorfile>
      <anchor>a9e0a40b7aaf472928097c1b56ec2911a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ScopedMetric</name>
    <filename>structScopedMetric.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedMetric</name>
      <anchorfile>structScopedMetric.html</anchorfile>
      <anchor>a39689fdf4aa17aa3ac6dca6afd0d78ca</anchor>
      <arglist>(Metric *metric)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedMetric</name>
      <anchorfile>structScopedMetric.html</anchorfile>
      <anchor>ae5e4b3b3debbe5ed9a39512bbfaebb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Metric *</type>
      <name>metric_</name>
      <anchorfile>structScopedMetric.html</anchorfile>
      <anchor>aebde3c41da4a2d7012364b0fb08da434</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int64_t</type>
      <name>start_</name>
      <anchorfile>structScopedMetric.html</anchorfile>
      <anchor>a16344d492667211edce8896a9870f28f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ScopedTempDir</name>
    <filename>structScopedTempDir.html</filename>
    <member kind="function">
      <type>void</type>
      <name>Cleanup</name>
      <anchorfile>structScopedTempDir.html</anchorfile>
      <anchor>ae8e8f2a6904402f0176535a5eec3f7aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CreateAndEnter</name>
      <anchorfile>structScopedTempDir.html</anchorfile>
      <anchor>a72a00112d53d74efdb85c6b8122a7f2d</anchor>
      <arglist>(const string &amp;name)</arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>start_dir_</name>
      <anchorfile>structScopedTempDir.html</anchorfile>
      <anchor>a62e21c151891f8f785587ffa641da593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>temp_dir_name_</name>
      <anchorfile>structScopedTempDir.html</anchorfile>
      <anchor>a9cef48464568983c2a0c9fff96f2aedf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>State</name>
    <filename>structState.html</filename>
    <member kind="typedef">
      <type>ExternalStringHashMap&lt; Node * &gt;::Type</type>
      <name>Paths</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>afac889527e262b376fb9d9801a148646</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddDefault</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>aea5bb0c3ae034d602c9258437f8a4936</anchor>
      <arglist>(StringPiece path, string *error)</arglist>
    </member>
    <member kind="function">
      <type>Edge *</type>
      <name>AddEdge</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>a3e3a4a62a0e595451f649a5bf3ae0fe7</anchor>
      <arglist>(const Rule *rule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddIn</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>a2a6968e7d8c0b0d8040ede1fb3fce0fe</anchor>
      <arglist>(Edge *edge, StringPiece path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddOut</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>afb586554e60317a16e2488b5f6faf86e</anchor>
      <arglist>(Edge *edge, StringPiece path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddPool</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>a310db703c2e0510c3e80d7e0524d976d</anchor>
      <arglist>(Pool *pool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddRule</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>ab4bac9807e4560de48f54ef8ad229081</anchor>
      <arglist>(const Rule *rule)</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; Node * &gt;</type>
      <name>DefaultNodes</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>ac3b1ca172073b28adc6f88c10af0999f</anchor>
      <arglist>(string *error)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>af849053c8ba18467e230483fc9e3ae61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>GetNode</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>a56b8860c41946bdda3f08809ec9f7e5e</anchor>
      <arglist>(StringPiece path)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>LookupNode</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>a9b89c1d3065f1c2100d16a41c1602ac5</anchor>
      <arglist>(StringPiece path) const </arglist>
    </member>
    <member kind="function">
      <type>Pool *</type>
      <name>LookupPool</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>af0c244d916af2ad290131ba85c15bf3f</anchor>
      <arglist>(const string &amp;pool_name)</arglist>
    </member>
    <member kind="function">
      <type>const Rule *</type>
      <name>LookupRule</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>abe8dfcbd700a01cb0e28f730055bf14c</anchor>
      <arglist>(const string &amp;rule_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>af0e2f344aff3b2a500637fe62d30bba2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; Node * &gt;</type>
      <name>RootNodes</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>a7ab43da26456a3ca765e82a01130b5ce</anchor>
      <arglist>(string *error)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>SpellcheckNode</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>a6bd913fad7947312109647b770a321c1</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>ab91bb1dd5aa6260ab2a456581daf9ec2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>BindingEnv</type>
      <name>bindings_</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>ae09e90c5524df7fd37a96751930336c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Node * &gt;</type>
      <name>defaults_</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>ae2ba184ebe4f549b9e6c435083c07c33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Edge * &gt;</type>
      <name>edges_</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>ab0f23f5026709fcb48d83e93d4bbed97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Paths</type>
      <name>paths_</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>a499e72dcfd901bf2886ed4f54c8cd3d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, Pool * &gt;</type>
      <name>pools_</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>a9412f61165c45cddfabff34528be7e33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, const Rule * &gt;</type>
      <name>rules_</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>a7853ca22a4a26bea1ea0e2b10a033e4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Pool</type>
      <name>kConsolePool</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>a1bfd2a655955c711d114b89e72115e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Pool</type>
      <name>kDefaultPool</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>a52ef5a6c1a831f6677114321364a44d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Rule</type>
      <name>kPhonyRule</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>a9522a499bd62121a14e00a3016fa0599</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>StateTestWithBuiltinRules</name>
    <filename>structStateTestWithBuiltinRules.html</filename>
    <member kind="function">
      <type>void</type>
      <name>AddCatRule</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a42197db0a44e925718dda384627a030c</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>GetNode</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a73a86246aefb2b8aeed71ac6979f37f3</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateTestWithBuiltinRules</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a637c05490b0e84428021bfa595094063</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state_</name>
      <anchorfile>structStateTestWithBuiltinRules.html</anchorfile>
      <anchor>a7fc39f179dd0a7d578690ce03ed58e87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Stopwatch</name>
    <filename>structStopwatch.html</filename>
    <member kind="function">
      <type>double</type>
      <name>Elapsed</name>
      <anchorfile>structStopwatch.html</anchorfile>
      <anchor>a61b86c09dc64bc6450abdd8eb8d63462</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restart</name>
      <anchorfile>structStopwatch.html</anchorfile>
      <anchor>ae44f7de1455395f468ab5f7f99734521</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stopwatch</name>
      <anchorfile>structStopwatch.html</anchorfile>
      <anchor>a628b5ebeed5df065dd847e68fb6336cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>uint64_t</type>
      <name>Now</name>
      <anchorfile>structStopwatch.html</anchorfile>
      <anchor>a7dcf7aae9e346d8e87f63df8ff0c26c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint64_t</type>
      <name>started_</name>
      <anchorfile>structStopwatch.html</anchorfile>
      <anchor>a51daa9298760261a48fc947eeb977386</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>StringPiece</name>
    <filename>structStringPiece.html</filename>
    <member kind="function">
      <type>string</type>
      <name>AsString</name>
      <anchorfile>structStringPiece.html</anchorfile>
      <anchor>ae61eaf54a5cd334bcc476670684c2fc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structStringPiece.html</anchorfile>
      <anchor>a391dac08b833f273eed900fab8cec3ba</anchor>
      <arglist>(const StringPiece &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structStringPiece.html</anchorfile>
      <anchor>aae6f37b025758f8a04c1215563d87b30</anchor>
      <arglist>(const StringPiece &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringPiece</name>
      <anchorfile>structStringPiece.html</anchorfile>
      <anchor>a0f45b54fa594663333d1ac3c8d7c8997</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringPiece</name>
      <anchorfile>structStringPiece.html</anchorfile>
      <anchor>a0ee45e9cdcaf87d70d97880fc10b10aa</anchor>
      <arglist>(const string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringPiece</name>
      <anchorfile>structStringPiece.html</anchorfile>
      <anchor>a1f2ea703262cb6af2948bafb29b7325e</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringPiece</name>
      <anchorfile>structStringPiece.html</anchorfile>
      <anchor>a22bc1663d6972827125459380a449115</anchor>
      <arglist>(const char *str, size_t len)</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>len_</name>
      <anchorfile>structStringPiece.html</anchorfile>
      <anchor>a22158d3d672745594ea91fd9e859a0ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>str_</name>
      <anchorfile>structStringPiece.html</anchorfile>
      <anchor>a0c21a59632952caa265e5898a0add91e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Subprocess</name>
    <filename>structSubprocess.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>Done</name>
      <anchorfile>structSubprocess.html</anchorfile>
      <anchor>aa049c85e5204cdf37469066921a0bf25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ExitStatus</type>
      <name>Finish</name>
      <anchorfile>structSubprocess.html</anchorfile>
      <anchor>abaecb4034f7db112f6bd1c4c4ba36cbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>GetOutput</name>
      <anchorfile>structSubprocess.html</anchorfile>
      <anchor>a9fcbe2be7d09688fc628263aae5d21dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Subprocess</name>
      <anchorfile>structSubprocess.html</anchorfile>
      <anchor>a02e3668310fef77df1e0c760b4e26dfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>OnPipeReady</name>
      <anchorfile>structSubprocess.html</anchorfile>
      <anchor>aea96bde27cbc9118d9c9572534da8872</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>Start</name>
      <anchorfile>structSubprocess.html</anchorfile>
      <anchor>a6813da0fc1567ee13661a37cba2e58d8</anchor>
      <arglist>(struct SubprocessSet *set, const string &amp;command)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Subprocess</name>
      <anchorfile>structSubprocess.html</anchorfile>
      <anchor>a9fe3fa3b9089c81bb62cd8f12eb4e67d</anchor>
      <arglist>(bool use_console)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>buf_</name>
      <anchorfile>structSubprocess.html</anchorfile>
      <anchor>a8e02620076abef08210d4ffd865eccf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>fd_</name>
      <anchorfile>structSubprocess.html</anchorfile>
      <anchor>aa7a359534ba9620b8968cf8237c20eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>pid_t</type>
      <name>pid_</name>
      <anchorfile>structSubprocess.html</anchorfile>
      <anchor>af675690a04bd28e55685e35cd345c5b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>use_console_</name>
      <anchorfile>structSubprocess.html</anchorfile>
      <anchor>ab2eb7e77b88e8af4f5efc5e4046834f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>SubprocessSet</name>
      <anchorfile>structSubprocess.html</anchorfile>
      <anchor>abfdc22438d5c005a2b739a845d985005</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SubprocessSet</name>
    <filename>structSubprocessSet.html</filename>
    <member kind="function">
      <type>Subprocess *</type>
      <name>Add</name>
      <anchorfile>structSubprocessSet.html</anchorfile>
      <anchor>a5f72fd727c938652e3a175d040cc4be1</anchor>
      <arglist>(const string &amp;command, bool use_console=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>structSubprocessSet.html</anchorfile>
      <anchor>a54f28f7e328426ce66043ca99906f39b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DoWork</name>
      <anchorfile>structSubprocessSet.html</anchorfile>
      <anchor>a1b12e1139c36d480a2d4a1680f9ad465</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Subprocess *</type>
      <name>NextFinished</name>
      <anchorfile>structSubprocessSet.html</anchorfile>
      <anchor>a2909bb928dc470bda735f88d45307a7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubprocessSet</name>
      <anchorfile>structSubprocessSet.html</anchorfile>
      <anchor>a00c1cd317ec172672fea906569f47806</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SubprocessSet</name>
      <anchorfile>structSubprocessSet.html</anchorfile>
      <anchor>af10b9c81b8710f4f33e8d680349abd03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetInterruptedFlag</name>
      <anchorfile>structSubprocessSet.html</anchorfile>
      <anchor>a92e3aa670c37aa51d071821cdcbc07e2</anchor>
      <arglist>(int signum)</arglist>
    </member>
    <member kind="variable">
      <type>queue&lt; Subprocess * &gt;</type>
      <name>finished_</name>
      <anchorfile>structSubprocessSet.html</anchorfile>
      <anchor>a1b3aec115bae40c9298275c126e9614b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct sigaction</type>
      <name>old_act_</name>
      <anchorfile>structSubprocessSet.html</anchorfile>
      <anchor>aec0da3e4841f90654b7340e117925e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sigset_t</type>
      <name>old_mask_</name>
      <anchorfile>structSubprocessSet.html</anchorfile>
      <anchor>a96e6d107505d2b4ebaad66223e981651</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Subprocess * &gt;</type>
      <name>running_</name>
      <anchorfile>structSubprocessSet.html</anchorfile>
      <anchor>ae71aa64afbdf9719dd14525944b9d453</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>interrupted_</name>
      <anchorfile>structSubprocessSet.html</anchorfile>
      <anchor>a2fab7e30a27d25b8d8c5d4953914d5ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VirtualFileSystem</name>
    <filename>structVirtualFileSystem.html</filename>
    <base>DiskInterface</base>
    <class kind="struct">VirtualFileSystem::Entry</class>
    <member kind="typedef">
      <type>map&lt; string, Entry &gt;</type>
      <name>FileMap</name>
      <anchorfile>structVirtualFileSystem.html</anchorfile>
      <anchor>abe2a64ffc8c99431e7393e8c69df25b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Create</name>
      <anchorfile>structVirtualFileSystem.html</anchorfile>
      <anchor>a4812c8ffb94473786acfd69e83ebdc9d</anchor>
      <arglist>(const string &amp;path, const string &amp;contents)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>MakeDir</name>
      <anchorfile>structVirtualFileSystem.html</anchorfile>
      <anchor>a04b55f1ee22d424d85244759cbd200ee</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeDirs</name>
      <anchorfile>structDiskInterface.html</anchorfile>
      <anchor>a7fae01dae68b95facad54b0bc233d279</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>ReadFile</name>
      <anchorfile>structVirtualFileSystem.html</anchorfile>
      <anchor>ab47293dbafe8926db6fb02742b42e140</anchor>
      <arglist>(const string &amp;path, string *err)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>RemoveFile</name>
      <anchorfile>structVirtualFileSystem.html</anchorfile>
      <anchor>adec99a414371927c9d5546b97c4e1cb0</anchor>
      <arglist>(const string &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TimeStamp</type>
      <name>Stat</name>
      <anchorfile>structVirtualFileSystem.html</anchorfile>
      <anchor>a21576b9c44cb6c1649ab85381c0983fd</anchor>
      <arglist>(const string &amp;path) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Tick</name>
      <anchorfile>structVirtualFileSystem.html</anchorfile>
      <anchor>a912bc655f005b0c522fa8e954b71eeee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VirtualFileSystem</name>
      <anchorfile>structVirtualFileSystem.html</anchorfile>
      <anchor>aecd1015fa61653d78dd46f22daf72c5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>WriteFile</name>
      <anchorfile>structVirtualFileSystem.html</anchorfile>
      <anchor>a41a187dea1125d4d136a1dc43ebbd129</anchor>
      <arglist>(const string &amp;path, const string &amp;contents)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>directories_made_</name>
      <anchorfile>structVirtualFileSystem.html</anchorfile>
      <anchor>a1f1de6e9f955aad9249b817c841a3a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FileMap</type>
      <name>files_</name>
      <anchorfile>structVirtualFileSystem.html</anchorfile>
      <anchor>a8a2223cbff33bbd954f5d69edab57650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>set&lt; string &gt;</type>
      <name>files_created_</name>
      <anchorfile>structVirtualFileSystem.html</anchorfile>
      <anchor>a50fdb459ed5484804ca1e82bdbb20bd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>files_read_</name>
      <anchorfile>structVirtualFileSystem.html</anchorfile>
      <anchor>af0989fe844495c2f648869a6a5074348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>set&lt; string &gt;</type>
      <name>files_removed_</name>
      <anchorfile>structVirtualFileSystem.html</anchorfile>
      <anchor>aaca2f5b74c3ea10b4de0d5268726be98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>now_</name>
      <anchorfile>structVirtualFileSystem.html</anchorfile>
      <anchor>a938852e1467e33baad75346bc79ae4f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VirtualFileSystem::Entry</name>
    <filename>structVirtualFileSystem_1_1Entry.html</filename>
    <member kind="variable">
      <type>string</type>
      <name>contents</name>
      <anchorfile>structVirtualFileSystem_1_1Entry.html</anchorfile>
      <anchor>a13ebd3f2eca71653563308338a7107bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mtime</name>
      <anchorfile>structVirtualFileSystem_1_1Entry.html</anchorfile>
      <anchor>ab9e2a62f080b86a2b2fa829114787a93</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>__gnu_cxx</name>
    <filename>namespace____gnu__cxx.html</filename>
    <class kind="struct">__gnu_cxx::hash&lt; std::string &gt;</class>
    <class kind="struct">__gnu_cxx::hash&lt; StringPiece &gt;</class>
  </compound>
  <compound kind="struct">
    <name>__gnu_cxx::hash&lt; std::string &gt;</name>
    <filename>struct____gnu__cxx_1_1hash_3_01std_1_1string_01_4.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>struct____gnu__cxx_1_1hash_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>af1cbecea149377151f9f3e4e3ff9b0f0</anchor>
      <arglist>(const std::string &amp;s) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>__gnu_cxx::hash&lt; StringPiece &gt;</name>
    <filename>struct____gnu__cxx_1_1hash_3_01StringPiece_01_4.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>struct____gnu__cxx_1_1hash_3_01StringPiece_01_4.html</anchorfile>
      <anchor>af3e0b4da7421b5c52c54c357e7296791</anchor>
      <arglist>(StringPiece key) const </arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>/home/evanm/projects/ninja/build/</name>
    <path>/home/evanm/projects/ninja/build/</path>
    <filename>dir_92c20f69771a1a746da9fb8585a4065a.html</filename>
    <file>doxygen_mainpage</file>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title></title>
    <filename>index</filename>
    <docanchor file="index">COPYING</docanchor>
    <docanchor file="index">README</docanchor>
  </compound>
</tagfile>
